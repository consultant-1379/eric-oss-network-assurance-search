/**
 * Assurance Search API
 * ```   Ericsson   |   DocNo n/155 19-CAF CAF 101 105/3   |   Rev PA1   |   Inter-work Description ``` ## Introduction This document describes the User Interface Internal REST API identified in the ADP GUI FA. ### Terms - **UI Internal Interface**: The interface providing access to static content meant to be used exclusively by the User Interface itself. All static content paths are relative to this URI. - **Client Container**: An SPA (Single Page Application) implementing the App Shell pattern e.g. E-UI SDK Container. - **UI App**: A full screen user interface exposed by a Microservice that can execute in the Client Container e.g. E-UI SDK App. - ***External UI App***: Any UIs that have a separate web page (outside the Client Container) or other alternative renderer e.g. Citrix. - **UI Component**: A reusable, embeddable UI Web Component exposed by a Microservice e.g. E-UI SDK Shareable Components.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sasha.katsman@ericsson.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';
import Filter from './Filter.js';
import MetricFilterAllOf from './MetricFilterAllOf.js';
import MetricType from './MetricType.js';

/**
 * The MetricFilter model module.
 * @module model/MetricFilter
 * @version 1.0.0
 */
class MetricFilter {
  /**
   * Constructs a new <code>MetricFilter</code>.
   * @alias module:model/MetricFilter
   * @implements module:model/Filter
   * @implements module:model/MetricFilterAllOf
   * @param type {module:model/MetricFilter.TypeEnum} filter type
   * @param metricType {module:model/MetricType}
   */
  constructor(type, metricType) {
    Filter.initialize(this);
    MetricFilterAllOf.initialize(this, type, metricType);
    MetricFilter.initialize(this, type, metricType);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, type, metricType) {
    obj.type = type;
    obj.metricType = metricType;
  }

  /**
   * Constructs a <code>MetricFilter</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MetricFilter} obj Optional instance to populate.
   * @return {module:model/MetricFilter} The populated <code>MetricFilter</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MetricFilter();
      Filter.constructFromObject(data, obj);
      MetricFilterAllOf.constructFromObject(data, obj);

      if (Object.prototype.hasOwnProperty.call(data, 'name')) {
        obj.name = ApiClient.convertToType(data.name, 'String');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'not')) {
        obj.not = ApiClient.convertToType(data.not, 'Boolean');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'type')) {
        obj.type = ApiClient.convertToType(data.type, 'String');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'metricType')) {
        obj.metricType = MetricType.constructFromObject(data.metricType);
      }
      if (Object.prototype.hasOwnProperty.call(data, 'from')) {
        obj.from = ApiClient.convertToType(data.from, 'Number');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'to')) {
        obj.to = ApiClient.convertToType(data.to, 'Number');
      }
    }
    return obj;
  }

  convertToObject() {
    return {
      name: this.name,
      not: this.not,
      type: this.type,
      metricType: this.metricType,
      from: this.from,
      to: this.to,
    };
  }

  static jsonStringValidation(data, keyName) {
    if (data[keyName] && !(typeof data[keyName] === 'string' || data[keyName] instanceof String)) {
      return false;
    }
    return true;
  }

  /**
   * Validates the JSON data with respect to <code>MetricFilter</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricFilter</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of MetricFilter.RequiredProperties) {
      if (!data[property]) {
        throw new Error(
          `The required field \`${property}\` is not found in the JSON data: ${JSON.stringify(
            data,
          )}`,
        );
      }
    }
    // ensure the json data is a string
    if (!MetricFilter.jsonStringValidation(data, 'name')) {
      throw new Error(
        `Expected the field \`name\` to be a primitive type in the JSON string but got ${data.name}`,
      );
    }
    // ensure the json data is a string
    if (!MetricFilter.jsonStringValidation(data, 'type')) {
      throw new Error(
        `Expected the field \`type\` to be a primitive type in the JSON string but got ${data.type}`,
      );
    }
    // validate the optional field `metricType`
    if (data.metricType) {
      // data not null
      MetricType.validateJSON(data.metricType);
    }

    return true;
  }

  /**
   * Returns name of the filter
   * @return {String}
   */
  getName() {
    return this.name;
  }

  /**
   * Sets name of the filter
   * @param {String} name name of the filter
   */
  setName(name) {
    this.name = name;
  }

  /**
   * Returns if true, inverses the filter
   * @return {Boolean}
   */
  getNot() {
    return this.not;
  }

  /**
   * Sets if true, inverses the filter
   * @param {Boolean} not if true, inverses the filter
   */
  setNot(not) {
    this.not = not;
  }

  /**
   * Returns filter type
   * @return {module:model/MetricFilter.TypeEnum}
   */
  getType() {
    return this.type;
  }

  /**
   * Sets filter type
   * @param {module:model/MetricFilter.TypeEnum} type filter type
   */
  setType(type) {
    this.type = type;
  }

  /**
   * @return {module:model/MetricType}
   */
  getMetricType() {
    return this.metricType;
  }

  /**
   * @param {module:model/MetricType} metricType
   */
  setMetricType(metricType) {
    this.metricType = metricType;
  }

  /**
   * Returns from limit
   * @return {Number}
   */
  getFrom() {
    return this.from;
  }

  /**
   * Sets from limit
   * @param {Number} from from limit
   */
  setFrom(from) {
    this.from = from;
  }

  /**
   * Returns to limit
   * @return {Number}
   */
  getTo() {
    return this.to;
  }

  /**
   * Sets to limit
   * @param {Number} to to limit
   */
  setTo(to) {
    this.to = to;
  }

  // Placeholder method to suppress eslint's no-unused-vars error
  static placeholder() {
    ApiClient.convertToType(123456, 'String');
  }
}

MetricFilter.RequiredProperties = ['type', 'metricType'];

/**
 * name of the filter
 * @member {String} name
 */
MetricFilter.prototype.name = undefined;

/**
 * if true, inverses the filter
 * @member {Boolean} not
 * @default false
 */
MetricFilter.prototype.not = false;

/**
 * filter type
 * @member {module:model/MetricFilter.TypeEnum} type
 */
MetricFilter.prototype.type = undefined;

/**
 * @member {module:model/MetricType} metricType
 */
MetricFilter.prototype.metricType = undefined;

/**
 * from limit
 * @member {Number} from
 */
MetricFilter.prototype.from = undefined;

/**
 * to limit
 * @member {Number} to
 */
MetricFilter.prototype.to = undefined;

// Implement Filter interface:
/**
 * name of the filter
 * @member {String} name
 */
Filter.prototype.name = undefined;
/**
 * if true, inverses the filter
 * @member {Boolean} not
 * @default false
 */
Filter.prototype.not = false;
// Implement MetricFilterAllOf interface:
/**
 * filter type
 * @member {module:model/MetricFilterAllOf.TypeEnum} type
 */
MetricFilterAllOf.prototype.type = undefined;
/**
 * @member {module:model/MetricType} metricType
 */
MetricFilterAllOf.prototype.metricType = undefined;
/**
 * from limit
 * @member {Number} from
 */
MetricFilterAllOf.prototype.from = undefined;
/**
 * to limit
 * @member {Number} to
 */
MetricFilterAllOf.prototype.to = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
MetricFilter.TypeEnum = {
  /**
   * value: "metric"
   * @const
   */
  metric: 'metric',
};

export default MetricFilter;
