/**
 * Assurance Search API
 * ```   Ericsson   |   DocNo n/155 19-CAF CAF 101 105/3   |   Rev PA1   |   Inter-work Description ``` ## Introduction This document describes the User Interface Internal REST API identified in the ADP GUI FA. ### Terms - **UI Internal Interface**: The interface providing access to static content meant to be used exclusively by the User Interface itself. All static content paths are relative to this URI. - **Client Container**: An SPA (Single Page Application) implementing the App Shell pattern e.g. E-UI SDK Container. - **UI App**: A full screen user interface exposed by a Microservice that can execute in the Client Container e.g. E-UI SDK App. - ***External UI App***: Any UIs that have a separate web page (outside the Client Container) or other alternative renderer e.g. Citrix. - **UI Component**: A reusable, embeddable UI Web Component exposed by a Microservice e.g. E-UI SDK Shareable Components.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sasha.katsman@ericsson.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';
import Context from './Context.js';

/**
 * The GetContextFieldsByQuery200Response model module.
 * @module model/GetContextFieldsByQuery200Response
 * @version 1.0.0
 */
class GetContextFieldsByQuery200Response {
  /**
   * Constructs a new <code>GetContextFieldsByQuery200Response</code>.
   * matching contexts
   * @alias module:model/GetContextFieldsByQuery200Response
   * @param offset {Number} offset of the page
   * @param length {Number} size of the page
   * @param total {Number} total number of records
   * @param results {Array.<module:model/Context>}
   */
  constructor(offset, length, total, results) {
    GetContextFieldsByQuery200Response.initialize(this, offset, length, total, results);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, offset, length, total, results) {
    obj.offset = offset || 0;
    obj.length = length || 10;
    obj.total = total;
    obj.results = results;
  }

  /**
   * Constructs a <code>GetContextFieldsByQuery200Response</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GetContextFieldsByQuery200Response} obj Optional instance to populate.
   * @return {module:model/GetContextFieldsByQuery200Response} The populated <code>GetContextFieldsByQuery200Response</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new GetContextFieldsByQuery200Response();

      if (Object.prototype.hasOwnProperty.call(data, 'offset')) {
        obj.offset = ApiClient.convertToType(data.offset, 'Number');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'length')) {
        obj.length = ApiClient.convertToType(data.length, 'Number');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'total')) {
        obj.total = ApiClient.convertToType(data.total, 'Number');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'results')) {
        obj.results = ApiClient.convertToType(data.results, [Context]);
      }
    }
    return obj;
  }

  convertToObject() {
    return {
      offset: this.offset,
      length: this.length,
      total: this.total,
      results: this.results,
    };
  }

  static jsonStringValidation(data, keyName) {
    if (data[keyName] && !(typeof data[keyName] === 'string' || data[keyName] instanceof String)) {
      return false;
    }
    return true;
  }

  /**
   * Validates the JSON data with respect to <code>GetContextFieldsByQuery200Response</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetContextFieldsByQuery200Response</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of GetContextFieldsByQuery200Response.RequiredProperties) {
      if (!data[property]) {
        throw new Error(
          `The required field \`${property}\` is not found in the JSON data: ${JSON.stringify(
            data,
          )}`,
        );
      }
    }
    if (data.results) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data.results)) {
        throw new Error(
          `Expected the field \`results\` to be an array in the JSON data but got ${data.results}`,
        );
      }
      // validate the optional field `results` (array)
      for (const item of data.results) {
        Context.validateJSON(item);
      }
    }

    return true;
  }

  /**
   * Returns offset of the page
   * minimum: 0
   * @return {Number}
   */
  getOffset() {
    return this.offset;
  }

  /**
   * Sets offset of the page
   * @param {Number} offset offset of the page
   */
  setOffset(offset) {
    this.offset = offset;
  }

  /**
   * Returns size of the page
   * minimum: 0
   * maximum: 100
   * @return {Number}
   */
  getLength() {
    return this.length;
  }

  /**
   * Sets size of the page
   * @param {Number} length size of the page
   */
  setLength(length) {
    this.length = length;
  }

  /**
   * Returns total number of records
   * minimum: 0
   * @return {Number}
   */
  getTotal() {
    return this.total;
  }

  /**
   * Sets total number of records
   * @param {Number} total total number of records
   */
  setTotal(total) {
    this.total = total;
  }

  /**
   * @return {Array.<module:model/Context>}
   */
  getResults() {
    return this.results;
  }

  /**
   * @param {Array.<module:model/Context>} results
   */
  setResults(results) {
    this.results = results;
  }

  // Placeholder method to suppress eslint's no-unused-vars error
  static placeholder() {
    ApiClient.convertToType(123456, 'String');
  }
}

GetContextFieldsByQuery200Response.RequiredProperties = ['offset', 'length', 'total', 'results'];

/**
 * offset of the page
 * @member {Number} offset
 * @default 0
 */
GetContextFieldsByQuery200Response.prototype.offset = 0;

/**
 * size of the page
 * @member {Number} length
 * @default 10
 */
GetContextFieldsByQuery200Response.prototype.length = 10;

/**
 * total number of records
 * @member {Number} total
 */
GetContextFieldsByQuery200Response.prototype.total = undefined;

/**
 * @member {Array.<module:model/Context>} results
 */
GetContextFieldsByQuery200Response.prototype.results = undefined;

export default GetContextFieldsByQuery200Response;
