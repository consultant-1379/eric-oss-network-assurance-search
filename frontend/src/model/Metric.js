/**
 * Assurance Search API
 * ```   Ericsson   |   DocNo n/155 19-CAF CAF 101 105/3   |   Rev PA1   |   Inter-work Description ``` ## Introduction This document describes the User Interface Internal REST API identified in the ADP GUI FA. ### Terms - **UI Internal Interface**: The interface providing access to static content meant to be used exclusively by the User Interface itself. All static content paths are relative to this URI. - **Client Container**: An SPA (Single Page Application) implementing the App Shell pattern e.g. E-UI SDK Container. - **UI App**: A full screen user interface exposed by a Microservice that can execute in the Client Container e.g. E-UI SDK App. - ***External UI App***: Any UIs that have a separate web page (outside the Client Container) or other alternative renderer e.g. Citrix. - **UI Component**: A reusable, embeddable UI Web Component exposed by a Microservice e.g. E-UI SDK Shareable Components.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sasha.katsman@ericsson.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';
import MetadataItem from './MetadataItem.js';
import MetricType from './MetricType.js';

/**
 * The Metric model module.
 * @module model/Metric
 * @version 1.0.0
 */
class Metric {
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {
    return obj;
  }

  /**
   * Constructs a <code>Metric</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Metric} obj Optional instance to populate.
   * @return {module:model/Metric} The populated <code>Metric</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Metric();

      if (Object.prototype.hasOwnProperty.call(data, 'type')) {
        obj.type = MetricType.constructFromObject(data.type);
      }
      if (Object.prototype.hasOwnProperty.call(data, 'id')) {
        obj.id = ApiClient.convertToType(data.id, 'String');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'value')) {
        obj.value = ApiClient.convertToType(data.value, 'Number');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'beginTimestamp')) {
        obj.beginTimestamp = ApiClient.convertToType(data.beginTimestamp, 'Number');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'endTimestamp')) {
        obj.endTimestamp = ApiClient.convertToType(data.endTimestamp, 'Number');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'metadata')) {
        obj.metadata = ApiClient.convertToType(data.metadata, [MetadataItem]);
      }
    }
    return obj;
  }

  convertToObject() {
    return {
      type: this.type,
      id: this.id,
      value: this.value,
      beginTimestamp: this.beginTimestamp,
      endTimestamp: this.endTimestamp,
      metadata: this.metadata,
    };
  }

  static jsonStringValidation(data, keyName) {
    if (data[keyName] && !(typeof data[keyName] === 'string' || data[keyName] instanceof String)) {
      return false;
    }
    return true;
  }

  /**
   * Validates the JSON data with respect to <code>Metric</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metric</code>.
   */
  static validateJSON(data) {
    // validate the optional field `type`
    if (data.type) {
      // data not null
      MetricType.validateJSON(data.type);
    }
    // ensure the json data is a string
    if (!Metric.jsonStringValidation(data, 'id')) {
      throw new Error(
        `Expected the field \`id\` to be a primitive type in the JSON string but got ${data.id}`,
      );
    }
    if (data.metadata) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data.metadata)) {
        throw new Error(
          `Expected the field \`metadata\` to be an array in the JSON data but got ${data.metadata}`,
        );
      }
      // validate the optional field `metadata` (array)
      for (const item of data.metadata) {
        MetadataItem.validateJSON(item);
      }
    }

    return true;
  }

  /**
   * @return {module:model/MetricType}
   */
  getType() {
    return this.type;
  }

  /**
   * @param {module:model/MetricType} type
   */
  setType(type) {
    this.type = type;
  }

  /**
   * Returns metric ID
   * @return {String}
   */
  getId() {
    return this.id;
  }

  /**
   * Sets metric ID
   * @param {String} id metric ID
   */
  setId(id) {
    this.id = id;
  }

  /**
   * Returns metric value
   * @return {Number}
   */
  getValue() {
    return this.value;
  }

  /**
   * Sets metric value
   * @param {Number} value metric value
   */
  setValue(value) {
    this.value = value;
  }

  /**
   * Returns the time when collection of this metric begins
   * @return {Number}
   */
  getBeginTimestamp() {
    return this.beginTimestamp;
  }

  /**
   * Sets the time when collection of this metric begins
   * @param {Number} beginTimestamp the time when collection of this metric begins
   */
  setBeginTimestamp(beginTimestamp) {
    this.beginTimestamp = beginTimestamp;
  }

  /**
   * Returns the time when collection of this metric ends
   * @return {Number}
   */
  getEndTimestamp() {
    return this.endTimestamp;
  }

  /**
   * Sets the time when collection of this metric ends
   * @param {Number} endTimestamp the time when collection of this metric ends
   */
  setEndTimestamp(endTimestamp) {
    this.endTimestamp = endTimestamp;
  }

  /**
   * Returns key/value pair
   * @return {Array.<module:model/MetadataItem>}
   */
  getMetadata() {
    return this.metadata;
  }

  /**
   * Sets key/value pair
   * @param {Array.<module:model/MetadataItem>} metadata key/value pair
   */
  setMetadata(metadata) {
    this.metadata = metadata;
  }

  // Placeholder method to suppress eslint's no-unused-vars error
  static placeholder() {
    ApiClient.convertToType(123456, 'String');
  }
}

/**
 * @member {module:model/MetricType} type
 */
Metric.prototype.type = undefined;

/**
 * metric ID
 * @member {String} id
 */
Metric.prototype.id = undefined;

/**
 * metric value
 * @member {Number} value
 */
Metric.prototype.value = undefined;

/**
 * the time when collection of this metric begins
 * @member {Number} beginTimestamp
 */
Metric.prototype.beginTimestamp = undefined;

/**
 * the time when collection of this metric ends
 * @member {Number} endTimestamp
 */
Metric.prototype.endTimestamp = undefined;

/**
 * key/value pair
 * @member {Array.<module:model/MetadataItem>} metadata
 */
Metric.prototype.metadata = undefined;

export default Metric;
