/**
 * Assurance Search API
 * ```   Ericsson   |   DocNo n/155 19-CAF CAF 101 105/3   |   Rev PA1   |   Inter-work Description ``` ## Introduction This document describes the User Interface Internal REST API identified in the ADP GUI FA. ### Terms - **UI Internal Interface**: The interface providing access to static content meant to be used exclusively by the User Interface itself. All static content paths are relative to this URI. - **Client Container**: An SPA (Single Page Application) implementing the App Shell pattern e.g. E-UI SDK Container. - **UI App**: A full screen user interface exposed by a Microservice that can execute in the Client Container e.g. E-UI SDK App. - ***External UI App***: Any UIs that have a separate web page (outside the Client Container) or other alternative renderer e.g. Citrix. - **UI Component**: A reusable, embeddable UI Web Component exposed by a Microservice e.g. E-UI SDK Shareable Components.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sasha.katsman@ericsson.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import superagent from 'superagent';
import qs from 'qs';
import { getConfig } from './config/configManager.js';

/**
 * @module ApiClient
 * @version 1.0.0
 */

/**
 * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an
 * application to use this class directly - the *Api and model classes provide the public API for the service. The
 * contents of this file should be regarded as internal but are documented for completeness.
 * @alias module:ApiClient
 * @class
 */
class ApiClient {
  /**
   * The base URL against which to resolve every API call's (relative) path.
   * Overrides the default value set in spec file if present
   * @param {String} basePath
   */
  constructor(basePath = 'http://localhost:3000') {
    /**
     * The base URL against which to resolve every API call's (relative) path.
     * @type {String}
     * @default http://localhost
     */
    this.basePath = basePath.replace(/\/+$/, '');

    /**
     * The authentication methods to be included for all API calls.
     * @type {Array.<String>}
     */
    this.authentications = {};

    /**
     * The default HTTP headers to be included for all API calls.
     * @type {Array.<String>}
     * @default {}
     */
    this.defaultHeaders = {};

    /**
     * The default HTTP timeout for all API calls.
     * @type {Number}
     * @default 60000
     */
    this.timeout = 60000;

    /**
     * If set to false an additional timestamp parameter is added to all API GET calls to
     * prevent browser caching
     * @type {Boolean}
     * @default true
     */
    this.cache = true;

    /**
     * If set to true, the client will save the cookies from each server
     * response, and return them in the next request.
     * @default false
     */
    this.enableCookies = false;

    /*
     * Used to save and return cookies in a node.js (non-browser) setting,
     * if this.enableCookies is set to true.
     */
    if (typeof window === 'undefined') {
      this.agent = new superagent.agent();
    }

    /*
     * Allow user to override superagent agent
     */
    this.requestAgent = null;

    /*
     * Allow user to add superagent plugins
     */
    this.plugins = null;
  }

  /**
   * Returns a string representation for an actual parameter.
   * @param param The actual parameter.
   * @returns {String} The string representation of <code>param</code>.
   */
  paramToString(param) {
    if (param === undefined || param === null) {
      return '';
    }
    if (param instanceof Date) {
      return param.toJSON();
    }
    if (ApiClient.canBeJsonified(param)) {
      return JSON.stringify(param);
    }

    return param.toString();
  }

  /**
   * Returns a boolean indicating if the parameter could be JSON.stringified
   * @param param The actual parameter
   * @returns {Boolean} Flag indicating if <code>param</code> can be JSON.stringified
   */
  static canBeJsonified(str) {
    if (typeof str !== 'string' && typeof str !== 'object') {
      return false;
    }
    try {
      const type = str.toString();
      return type === '[object Object]' || type === '[object Array]';
    } catch (err) {
      return false;
    }
  }

  /**
   * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.
   * NOTE: query parameters are not handled here.
   * @param {String} path The path to append to the base URL.
   * @param {Object} pathParams The parameter values to append.
   * @returns {String} The encoded path with parameter values substituted.
   */
  buildUrl(path, pathParams) {
    if (!path.match(/^\//)) {
      path = `/${path}`;
    }

    let url = `${window.location.protocol}//${window.location.hostname}`;
    if (!['80', '443'].includes(window.location.port)) {
      url = `${url}:${window.location.port}`;
    }
    url += path;

    url = url.replace(/\{([\w-.]+)\}/g, (fullMatch, key) => {
      let value;
      if (Object.prototype.hasOwnProperty.call(pathParams, key)) {
        value = this.paramToString(pathParams[key]);
      } else {
        value = fullMatch;
      }

      return encodeURIComponent(value);
    });

    return url;
  }

  /**
   * Checks whether the given content type represents JSON.<br>
   * JSON content type examples:<br>
   * <ul>
   * <li>application/json</li>
   * <li>application/json; charset=UTF8</li>
   * <li>APPLICATION/JSON</li>
   * </ul>
   * @param {String} contentType The MIME content type to check.
   * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.
   */
  isJsonMime(contentType) {
    return Boolean(
      contentType !== undefined &&
        contentType !== null &&
        contentType.match(/^application\/json(;.*)?$/i),
    );
  }

  /**
   * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.
   * @param {Array.<String>} contentTypes
   * @returns {String} The chosen content type, preferring JSON.
   */
  jsonPreferredMime(contentTypes) {
    for (let i = 0; i < contentTypes.length; i += 1) {
      if (this.isJsonMime(contentTypes[i])) {
        return contentTypes[i];
      }
    }

    return contentTypes[0];
  }

  /**
   * Checks whether the given parameter value represents file-like content.
   * @param param The parameter to check.
   * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
   */
  isFileParam(param) {
    // Buffer in Node.js
    if (typeof Buffer === 'function' && param instanceof Buffer) {
      return true;
    }

    // Blob in browser
    if (typeof Blob === 'function' && param instanceof Blob) {
      return true;
    }

    // File in browser (it seems File object is also instance of Blob, but keep this for safe)
    if (typeof File === 'function' && param instanceof File) {
      return true;
    }

    return false;
  }

  /**
   * Normalizes parameter values:
   * <ul>
   * <li>remove nils</li>
   * <li>keep files and arrays</li>
   * <li>format to string with `paramToString` for other cases</li>
   * </ul>
   * @param {Object.<String, Object>} params The parameters as object properties.
   * @returns {Object.<String, Object>} normalized parameters.
   */
  normalizeParams(params) {
    const newParams = {};
    for (const key in params) {
      if (
        Object.prototype.hasOwnProperty.call(params, key) &&
        params[key] !== undefined &&
        params[key] !== null
      ) {
        const value = params[key];
        if (this.isFileParam(value) || Array.isArray(value)) {
          newParams[key] = value;
        } else {
          newParams[key] = this.paramToString(value);
        }
      }
    }

    return newParams;
  }

  /**
   * Builds a string representation of an array-type actual parameter, according to the given collection format.
   * @param {Array} param An array parameter.
   * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.
   * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns
   * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.
   */
  buildCollectionParam(param, collectionFormat) {
    if (param === undefined || param === null) {
      return null;
    }
    switch (collectionFormat) {
      case 'csv':
        return param.map(this.paramToString, this).join(',');
      case 'ssv':
        return param.map(this.paramToString, this).join(' ');
      case 'tsv':
        return param.map(this.paramToString, this).join('\t');
      case 'pipes':
        return param.map(this.paramToString, this).join('|');
      case 'multi':
        // return the array directly as SuperAgent will handle it as expected
        return param.map(this.paramToString, this);
      case 'passthrough':
        return param;
      default:
        throw new Error(`Unknown collection format: ${collectionFormat}`);
    }
  }

  basicAuthCase(request, auth) {
    if (auth.username || auth.password) {
      request.auth(auth.username || '', auth.password || '');
    }
  }

  bearerAuthCase(request, auth) {
    if (auth.accessToken) {
      const localVarBearerToken =
        typeof auth.accessToken === 'function' ? auth.accessToken() : auth.accessToken;
      request.set({ Authorization: `Bearer ${localVarBearerToken}` });
    }
  }

  apiKeyAuthCase(request, auth) {
    if (auth.apiKey) {
      const data = {};
      if (auth.apiKeyPrefix) {
        data[auth.name] = `${auth.apiKeyPrefix} ${auth.apiKey}`;
      } else {
        data[auth.name] = auth.apiKey;
      }

      if (auth.in === 'header') {
        request.set(data);
      } else {
        request.query(data);
      }
    }
  }

  oauth2AuthCase(request, auth) {
    if (auth.accessToken) {
      request.set({ Authorization: `Bearer ${auth.accessToken}` });
    }
  }

  /**
   * Applies authentication headers to the request.
   * @param {Object} request The request object created by a <code>superagent()</code> call.
   * @param {Array.<String>} authNames An array of authentication method names.
   */
  applyAuthToRequest(request, authNames) {
    authNames.forEach((authName) => {
      const auth = this.authentications[authName];
      switch (auth.type) {
        case 'basic':
          ApiClient.basicAuthCase(request, auth);
          break;
        case 'bearer':
          ApiClient.bearerAuthCase(request, auth);
          break;
        case 'apiKey':
          ApiClient.apiKeyAuthCase(request, auth);
          break;
        case 'oauth2':
          ApiClient.oauth2AuthCase(request, auth);
          break;
        default:
          throw new Error(`Unknown authentication type: ${auth.type}`);
      }
    });
  }

  /**
   * Deserializes an HTTP response body into a value of the specified type.
   * @param {Object} response A SuperAgent response object.
   * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types
   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
   * all properties on <code>data<code> will be converted to this type.
   * @returns A value of the specified type.
   */
  deserialize(response, returnType) {
    if (
      response === undefined ||
      response === null ||
      returnType === undefined ||
      returnType === null ||
      response.status === 204
    ) {
      return null;
    }

    // Rely on SuperAgent for parsing response body.
    // See http://visionmedia.github.io/superagent/#parsing-response-bodies
    let data = response.body;
    if (
      data === undefined ||
      data === null ||
      (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)
    ) {
      // SuperAgent does not always produce a body; use the unparsed response as a fallback
      data = response.text;
    }

    return ApiClient.convertToType(data, returnType);
  }

  preparePlugins(request) {
    if (this.plugins !== null) {
      for (const index in this.plugins) {
        if (Object.prototype.hasOwnProperty.call(this.plugins, index)) {
          request.use(this.plugins[index]);
        }
      }
    }
    return request;
  }

  processMultipartFormData(request, formParams) {
    const _formParams = this.normalizeParams(formParams);
    for (const key in _formParams) {
      if (Object.prototype.hasOwnProperty.call(_formParams, key)) {
        const _formParamsValue = _formParams[key];
        if (this.isFileParam(_formParamsValue)) {
          // file field
          request.attach(key, _formParamsValue);
        } else if (
          Array.isArray(_formParamsValue) &&
          _formParamsValue.length &&
          this.isFileParam(_formParamsValue[0])
        ) {
          // multiple files
          _formParamsValue.forEach((file) => request.attach(key, file));
        } else {
          request.field(key, _formParamsValue);
        }
      }
    }
    return request;
  }

  prepareCookies(request) {
    // Attach previously saved cookies, if enabled
    if (this.enableCookies) {
      if (typeof window === 'undefined') {
        this.agent._attachCookies(request);
      } else {
        request.withCredentials();
      }
    }
    return request;
  }

  prepareApiPromise(request, returnType) {
    return new Promise((resolve, reject) => {
      request.end((error, response) => {
        if (error) {
          const err = {};
          if (response) {
            err.status = response.status;
            err.statusText = response.statusText;
            err.body = response.body;
            err.response = response;
          }
          err.error = error;

          reject(err);
        } else {
          try {
            const data = this.deserialize(response, returnType);
            if (this.enableCookies && typeof window === 'undefined') {
              this.agent._saveCookies(response);
            }

            resolve({ data, response });
          } catch (err) {
            reject(err);
          }
        }
      });
    });
  }

  /**
   * Wait for the given milliseconds
   * @param {number} milliseconds The given time to wait
   * @returns {Promise} A fulfilled promise after the given time has passed
   */
  waitFor(milliseconds) {
    console.log(`Retrying in ${milliseconds}ms...`);
    return new Promise((resolve) => {
      setTimeout(resolve, milliseconds);
    });
  }

  /**
   * Execute an API call and retry with exponential backoff
   * based on the maximum retry attempts it can perform
   * @param {Promise} promise promise to be executed
   * @param {function} onRetry callback executed on every retry
   * @param {number} maxRetries The maximum number of retries to be attempted
   * @returns {Promise} The result of the given promise passed in
   */
  exponentialBackoffApiCall(request, returnType, onRetry, maxRetries) {
    // Notice that we declare an inner function here
    // so we can encapsulate the retries and don't expose
    // it to the caller. This is also a recursive function
    const self = this;
    async function retryWithBackoff(retries) {
      try {
        // Make sure we don't wait on the first attempt
        if (retries > 0) {
          // Here is where the magic happens.
          // on every retry, we exponentially increase the time to wait.
          const timeToWait = 2 ** retries * 100;
          await self.waitFor(timeToWait);
        }
        return await self.prepareApiPromise(request, returnType);
      } catch (e) {
        // only retry if we didn't reach the limit
        // otherwise, let the caller handle the error
        if (retries < maxRetries) {
          onRetry();
          return retryWithBackoff(retries + 1);
        }
        console.warn('Max retries reached.');
        return self.prepareApiPromise(request, returnType);
      }
    }

    return retryWithBackoff(0);
  }

  /**
   * Invokes the REST service using the supplied settings and parameters.
   * @param {String} path The base URL to invoke.
   * @param {String} httpMethod The HTTP method to use.
   * @param {Object.<String, String>} pathParams A map of path parameters and their values.
   * @param {Object.<String, Object>} queryParams A map of query parameters and their values.
   * @param {Object.<String, Object>} headerParams A map of header parameters and their values.
   * @param {Object.<String, Object>} formParams A map of form parameters and their values.
   * @param {Object} bodyParam The value to pass as the request body.
   * @param {Array.<String>} authNames An array of authentication type names.
   * @param {Array.<String>} contentTypes An array of request MIME types.
   * @param {Array.<String>} accepts An array of acceptable response MIME types.
   * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the
   * constructor for a complex type.
   * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.
   */
  callApi(
    path,
    httpMethod,
    pathParams,
    queryParams,
    headerParams,
    formParams,
    bodyParam,
    authNames,
    contentTypes,
    accepts,
    returnType,
  ) {
    const url = this.buildUrl(getConfig().getFrontendRoutePrefix() + path, pathParams);
    let request = superagent(httpMethod, url);

    request = this.preparePlugins(request);

    // apply authentications
    this.applyAuthToRequest(request, authNames);

    // set query parameters
    if (httpMethod.toUpperCase() === 'GET' && !this.cache) {
      queryParams._ = new Date().getTime();
    }

    request.query(qs.stringify(queryParams, { skipNulls: true }));

    // set header parameters
    request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));

    // set requestAgent if it is set by user
    if (this.requestAgent) {
      request.agent(this.requestAgent);
    }

    // set request timeout
    request.timeout(this.timeout);

    const contentType = this.jsonPreferredMime(contentTypes);
    // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)
    if (contentType && contentType !== 'multipart/form-data') {
      request.type(contentType);
    }

    if (contentType === 'application/x-www-form-urlencoded') {
      request.send(qs.stringify(this.normalizeParams(formParams)));
    } else if (contentType === 'multipart/form-data') {
      request = this.processMultipartFormData(request, formParams);
    } else if (bodyParam !== null && bodyParam !== undefined) {
      if (!request.header['Content-Type']) {
        request.type('application/json');
      }
      request.send(bodyParam);
    }

    const accept = this.jsonPreferredMime(accepts);
    if (accept) {
      request.accept(accept);
    }

    if (returnType === 'Blob') {
      request.responseType('blob');
    } else if (returnType === 'String') {
      request.responseType('text');
    }

    request = this.prepareCookies(request);

    return this.exponentialBackoffApiCall(
      request,
      returnType,
      () => {},
      getConfig().getExponentialBackoffRetryAttempts(),
    );
  }

  /**
   * Parses an ISO-8601 string representation or epoch representation of a date value.
   * @param {String} str The date value as a string.
   * @returns {Date} The parsed date object.
   */
  static parseDate(str) {
    if (Number.isNaN(str)) {
      return new Date(str.replace(/(\d)(T)(\d)/i, '$1 $3'));
    }
    return new Date(+str);
  }

  static defaultDataConversionCase(type, data) {
    if (type === Object) {
      // generic object, return directly
      return data;
    }
    if (typeof type.constructFromObject === 'function') {
      // for model type like User and enum class
      return type.constructFromObject(data);
    }
    if (Array.isArray(type)) {
      // for array type like: ['String']
      const itemType = type[0];

      return data.map((item) => ApiClient.convertToType(item, itemType));
    }
    if (typeof type === 'object') {
      // for plain object type like: {'String': 'Integer'}
      let keyType;
      let valueType;
      for (const k in type) {
        if (Object.prototype.hasOwnProperty.call(type, k)) {
          keyType = k;
          valueType = type[k];
          break;
        }
      }

      const result = {};
      for (const k in data) {
        if (Object.prototype.hasOwnProperty.call(data, k)) {
          const key = ApiClient.convertToType(k, keyType);
          const value = ApiClient.convertToType(data[k], valueType);
          result[key] = value;
        }
      }

      return result;
    }
    // for unknown type, return the data directly
    return data;
  }

  /**
   * Converts a value to the specified type.
   * @param {(String|Object)} data The data to convert, as a string or object.
   * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types
   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
   * all properties on <code>data<code> will be converted to this type.
   * @returns An instance of the specified type or null or undefined if data is null or undefined.
   */
  static convertToType(data, type) {
    if (data === null || data === undefined) {
      return data;
    }

    switch (type) {
      case 'Boolean':
        return Boolean(data);
      case 'Integer':
        return parseInt(data, 10);
      case 'Number':
        return parseFloat(data);
      case 'String':
        return String(data);
      case 'Date':
        return this.parseDate(String(data));
      case 'Blob':
        return data;
      default:
        return this.defaultDataConversionCase(type, data);
    }
  }

  /**
   * Gets an array of host settings
   * @returns An array of host settings
   */
  hostSettings() {
    return [
      {
        url: '',
        description: 'base url',
      },
    ];
  }

  getBasePathFromSettings(index, variables = {}) {
    const servers = this.hostSettings();

    // check array index out of bound
    if (index < 0 || index >= servers.length) {
      throw new Error(
        `Invalid index ${index} when selecting the host settings. Must be less than ${servers.length}`,
      );
    }

    const server = servers[index];
    let { url } = server;

    // go through variable and assign a value
    for (const variableName in server.variables) {
      if (variableName in variables) {
        const variable = server.variables[variableName];
        if (
          !('enum_values' in variable) ||
          variable.enum_values.includes(variables[variableName])
        ) {
          url = url.replace(`{${variableName}}`, variables[variableName]);
        } else {
          throw new Error(
            `The variable \`${variableName}\` in the host URL has invalid value ${variables[variableName]}. Must be ${server.variables[variableName].enum_values}.`,
          );
        }
      } else {
        // use default value
        url = url.replace(`{${variableName}}`, server.variables[variableName].default_value);
      }
    }
    return url;
  }

  /**
   * Constructs a new map or array model from REST data.
   * @param data {Object|Array} The REST data.
   * @param obj {Object|Array} The target object or array.
   */
  static constructFromObject(data, obj, itemType) {
    if (Array.isArray(data)) {
      for (let i = 0; i < data.length; i += 1) {
        if (Object.prototype.hasOwnProperty.call(data, i)) {
          obj[i] = ApiClient.convertToType(data[i], itemType);
        }
      }
    } else {
      for (const k in data) {
        if (Object.prototype.hasOwnProperty.call(data, k)) {
          obj[k] = ApiClient.convertToType(data[k], itemType);
        }
      }
    }
  }
}

/**
 * Enumeration of collection format separator strategies.
 * @enum {String}
 * @readonly
 */
ApiClient.CollectionFormatEnum = {
  /**
   * Comma-separated values. Value: <code>csv</code>
   * @const
   */
  CSV: ',',

  /**
   * Space-separated values. Value: <code>ssv</code>
   * @const
   */
  SSV: ' ',

  /**
   * Tab-separated values. Value: <code>tsv</code>
   * @const
   */
  TSV: '\t',

  /**
   * Pipe(|)-separated values. Value: <code>pipes</code>
   * @const
   */
  PIPES: '|',

  /**
   * Native array. Value: <code>multi</code>
   * @const
   */
  MULTI: 'multi',
};

/**
 * The default API client implementation.
 * @type {module:ApiClient}
 */
ApiClient.instance = new ApiClient();
export default ApiClient;
