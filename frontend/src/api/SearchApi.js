/**
 * Assurance Search API
 * ```   Ericsson   |   DocNo n/155 19-CAF CAF 101 105/3   |   Rev PA1   |   Inter-work Description ``` ## Introduction This document describes the User Interface Internal REST API identified in the ADP GUI FA. ### Terms - **UI Internal Interface**: The interface providing access to static content meant to be used exclusively by the User Interface itself. All static content paths are relative to this URI. - **Client Container**: An SPA (Single Page Application) implementing the App Shell pattern e.g. E-UI SDK Container. - **UI App**: A full screen user interface exposed by a Microservice that can execute in the Client Container e.g. E-UI SDK App. - ***External UI App***: Any UIs that have a separate web page (outside the Client Container) or other alternative renderer e.g. Citrix. - **UI Component**: A reusable, embeddable UI Web Component exposed by a Microservice e.g. E-UI SDK Shareable Components.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sasha.katsman@ericsson.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';
/* eslint-disable no-unused-vars */
import Context1 from '../model/Context1.js';
import ContextFacet from '../model/ContextFacet.js';
import EntityFilter from '../model/EntityFilter.js';
import Error from '../model/Error.js';
import GetContextFieldsByQuery200Response from '../model/GetContextFieldsByQuery200Response.js';
import MetricType from '../model/MetricType.js';
import SearchMetricsByQuery200Response from '../model/SearchMetricsByQuery200Response.js';
import SortOrder from '../model/SortOrder.js';
/* eslint-enable no-unused-vars */

/**
 * Search service.
 * @module api/SearchApi
 * @version 1.0.0
 */
export default class SearchApi {
  /* eslint-disable sonarjs/no-duplicate-string */

  /**
   * Constructs a new SearchApi.
   * @alias module:api/SearchApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Returns a list of context fields
   * Retrieves list of context fields matching search criteria. Query supports wildcard (*|?) characters.
   * @param {String} index Specify an effective index
   * @param {Array.<module:model/EntityFilter>} filters Filters for finding contexts
   * @param {Object} opts Optional parameters
   * @param {String} opts.contextTypeId a full context type used to narrow scope of context search
   * @param {Object.<String, Object>} opts.sortBy column name to be sorted on.
   * @param {module:model/SortOrder} opts.sortOrder sort order
   * @param {Number} opts.offset Specify the offset of the first hit to return. (default to 0)
   * @param {Number} opts.length Set the number of hits to retrieve (used only with offset). (default to 10)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetContextFieldsByQuery200Response} and HTTP response
   */
  getContextFieldsByQueryWithHttpInfo(index, filters, opts) {
    opts = opts || {};
    const postBody = null;
    // verify the required parameter 'index' is set
    if (index === undefined || index === null) {
      throw new Error(
        "Missing the required parameter 'index' when calling getContextFieldsByQuery",
      );
    }
    // verify the required parameter 'filters' is set
    if (filters === undefined || filters === null) {
      throw new Error(
        "Missing the required parameter 'filters' when calling getContextFieldsByQuery",
      );
    }

    const pathParams = {
      index,
    };
    const queryParams = {
      filters,
      contextTypeId: opts.contextTypeId,
      sortBy: opts.sortBy,
      sortOrder: opts.sortOrder,
      offset: opts.offset,
      length: opts.length,
    };
    const headerParams = {};
    const formParams = {};

    const authNames = [];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = GetContextFieldsByQuery200Response;
    return this.apiClient.callApi(
      '/{index}/search/contexts',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
    );
  }

  /**
   * Returns a list of context fields
   * Retrieves list of context fields matching search criteria. Query supports wildcard (*|?) characters.
   * @param {String} index Specify an effective index
   * @param {Array.<module:model/EntityFilter>} filters Filters for finding contexts
   * @param {Object} opts Optional parameters
   * @param {String} opts.contextTypeId a full context type used to narrow scope of context search
   * @param {Object.<String, Object>} opts.sortBy column name to be sorted on.
   * @param {module:model/SortOrder} opts.sortOrder sort order
   * @param {Number} opts.offset Specify the offset of the first hit to return. (default to 0)
   * @param {Number} opts.length Set the number of hits to retrieve (used only with offset). (default to 10)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetContextFieldsByQuery200Response}
   */
  getContextFieldsByQuery(index, filters, opts) {
    return this.getContextFieldsByQueryWithHttpInfo(index, filters, opts).then(
      (responseAndData) => responseAndData.data,
    );
  }

  /**
   * Returns a facet counts for related contexts
   * Retrieves related facet counts for given context types
   * @param {String} index Specify an effective index
   * @param {Object.<String, module:model/Context1>} contextId The context ID used to find relations
   * @param {String} contextTypeId a context type used for searching
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContextFacet>} and HTTP response
   */
  searchContextFacetsWithHttpInfo(index, contextId, contextTypeId) {
    const postBody = null;
    // verify the required parameter 'index' is set
    if (index === undefined || index === null) {
      throw new Error("Missing the required parameter 'index' when calling searchContextFacets");
    }
    // verify the required parameter 'contextId' is set
    if (contextId === undefined || contextId === null) {
      throw new Error(
        "Missing the required parameter 'contextId' when calling searchContextFacets",
      );
    }
    // verify the required parameter 'contextTypeId' is set
    if (contextTypeId === undefined || contextTypeId === null) {
      throw new Error(
        "Missing the required parameter 'contextTypeId' when calling searchContextFacets",
      );
    }

    const pathParams = {
      index,
    };
    const queryParams = {
      contextId,
      contextTypeId,
    };
    const headerParams = {};
    const formParams = {};

    const authNames = [];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = [ContextFacet];
    return this.apiClient.callApi(
      '/{index}/search/related-contexts-facets',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
    );
  }

  /**
   * Returns a facet counts for related contexts
   * Retrieves related facet counts for given context types
   * @param {String} index Specify an effective index
   * @param {Object.<String, module:model/Context1>} contextId The context ID used to find relations
   * @param {String} contextTypeId a context type used for searching
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContextFacet>}
   */
  searchContextFacets(index, contextId, contextTypeId) {
    return this.searchContextFacetsWithHttpInfo(index, contextId, contextTypeId).then(
      (responseAndData) => responseAndData.data,
    );
  }

  /**
   * Returns a list of KPIs
   * Retrieves list of KPIs matching search criteria
   * @param {String} index Specify an effective index
   * @param {String} contextTypeId a context type used for searching
   * @param {Array.<module:model/MetricType>} metricTypes Names of metrics to return
   * @param {Object} opts Optional parameters
   * @param {Array.<module:model/OneOfMetricFilterEntityFilter>} opts.filters Filter the query with numeric, facet and/or tag filters.
   * @param {Object.<String, Object>} opts.sortBy column name to be sorted on.
   * @param {module:model/SortOrder} opts.sortOrder sort order
   * @param {Number} opts.offset Specify the offset of the first hit to return. (default to 0)
   * @param {Number} opts.length Set the number of hits to retrieve (used only with offset). (default to 10)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SearchMetricsByQuery200Response} and HTTP response
   */
  searchMetricsByQueryWithHttpInfo(index, contextTypeId, metricTypes, opts) {
    opts = opts || {};
    const postBody = null;
    // verify the required parameter 'index' is set
    if (index === undefined || index === null) {
      throw new Error("Missing the required parameter 'index' when calling searchMetricsByQuery");
    }
    // verify the required parameter 'contextTypeId' is set
    if (contextTypeId === undefined || contextTypeId === null) {
      throw new Error(
        "Missing the required parameter 'contextTypeId' when calling searchMetricsByQuery",
      );
    }
    // verify the required parameter 'metricTypes' is set
    if (metricTypes === undefined || metricTypes === null) {
      throw new Error(
        "Missing the required parameter 'metricTypes' when calling searchMetricsByQuery",
      );
    }

    const pathParams = {
      index,
    };
    const queryParams = {
      contextTypeId,
      metricTypes,
      filters: opts.filters,
      sortBy: opts.sortBy,
      sortOrder: opts.sortOrder,
      offset: opts.offset,
      length: opts.length,
    };
    const headerParams = {};
    const formParams = {};

    const authNames = [];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = SearchMetricsByQuery200Response;
    return this.apiClient.callApi(
      '/{index}/search/metrics',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
    );
  }

  /**
   * Returns a list of KPIs
   * Retrieves list of KPIs matching search criteria
   * @param {String} index Specify an effective index
   * @param {String} contextTypeId a context type used for searching
   * @param {Array.<module:model/MetricType>} metricTypes Names of metrics to return
   * @param {Object} opts Optional parameters
   * @param {Array.<module:model/OneOfMetricFilterEntityFilter>} opts.filters Filter the query with numeric, facet and/or tag filters.
   * @param {Object.<String, Object>} opts.sortBy column name to be sorted on.
   * @param {module:model/SortOrder} opts.sortOrder sort order
   * @param {Number} opts.offset Specify the offset of the first hit to return. (default to 0)
   * @param {Number} opts.length Set the number of hits to retrieve (used only with offset). (default to 10)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SearchMetricsByQuery200Response}
   */
  searchMetricsByQuery(index, contextTypeId, metricTypes, opts) {
    return this.searchMetricsByQueryWithHttpInfo(index, contextTypeId, metricTypes, opts).then(
      (responseAndData) => responseAndData.data,
    );
  }

  /* eslint-enable sonarjs/no-duplicate-string */
}
