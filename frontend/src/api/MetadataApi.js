/**
 * Assurance Search API
 * ```   Ericsson   |   DocNo n/155 19-CAF CAF 101 105/3   |   Rev PA1   |   Inter-work Description ``` ## Introduction This document describes the User Interface Internal REST API identified in the ADP GUI FA. ### Terms - **UI Internal Interface**: The interface providing access to static content meant to be used exclusively by the User Interface itself. All static content paths are relative to this URI. - **Client Container**: An SPA (Single Page Application) implementing the App Shell pattern e.g. E-UI SDK Container. - **UI App**: A full screen user interface exposed by a Microservice that can execute in the Client Container e.g. E-UI SDK App. - ***External UI App***: Any UIs that have a separate web page (outside the Client Container) or other alternative renderer e.g. Citrix. - **UI Component**: A reusable, embeddable UI Web Component exposed by a Microservice e.g. E-UI SDK Shareable Components.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sasha.katsman@ericsson.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';
/* eslint-disable no-unused-vars */
import ContextType from '../model/ContextType.js';
import Error from '../model/Error.js';
import GetStaticInformation200ResponseInner from '../model/GetStaticInformation200ResponseInner.js';
import Index from '../model/Index.js';
import MetricType from '../model/MetricType.js';
import Relation from '../model/Relation.js';
/* eslint-enable no-unused-vars */

/**
 * Metadata service.
 * @module api/MetadataApi
 * @version 1.0.0
 */
export default class MetadataApi {
  /* eslint-disable sonarjs/no-duplicate-string */

  /**
   * Constructs a new MetadataApi.
   * @alias module:api/MetadataApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Return available context
   * metadata endpoint for returning available context types
   * @param {String} index Specify an effective index
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContextType>} and HTTP response
   */
  getAvailableContextsWithHttpInfo(index) {
    const postBody = null;
    // verify the required parameter 'index' is set
    if (index === undefined || index === null) {
      throw new Error("Missing the required parameter 'index' when calling getAvailableContexts");
    }

    const pathParams = {
      index,
    };
    const queryParams = {};
    const headerParams = {};
    const formParams = {};

    const authNames = [];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = [ContextType];
    return this.apiClient.callApi(
      '/{index}/metadata/contexts',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
    );
  }

  /**
   * Return available context
   * metadata endpoint for returning available context types
   * @param {String} index Specify an effective index
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContextType>}
   */
  getAvailableContexts(index) {
    return this.getAvailableContextsWithHttpInfo(index).then(
      (responseAndData) => responseAndData.data,
    );
  }

  /**
   * Return available indexes
   * metadata endpoint for returning available indexes (domains)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Index>} and HTTP response
   */
  getAvailableIndexesWithHttpInfo() {
    const postBody = null;

    const pathParams = {};
    const queryParams = {};
    const headerParams = {};
    const formParams = {};

    const authNames = [];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = [Index];
    return this.apiClient.callApi(
      '/metadata/indexes',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
    );
  }

  /**
   * Return available indexes
   * metadata endpoint for returning available indexes (domains)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Index>}
   */
  getAvailableIndexes() {
    return this.getAvailableIndexesWithHttpInfo().then((responseAndData) => responseAndData.data);
  }

  /**
   * Return available metrics types
   * metadata endpoint for returning available metrics types for a given context
   * @param {String} index Specify an effective index
   * @param {String} contextTypeId a context type used for searching
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MetricType>} and HTTP response
   */
  getMetricsByContextWithHttpInfo(index, contextTypeId) {
    const postBody = null;
    // verify the required parameter 'index' is set
    if (index === undefined || index === null) {
      throw new Error("Missing the required parameter 'index' when calling getMetricsByContext");
    }
    // verify the required parameter 'contextTypeId' is set
    if (contextTypeId === undefined || contextTypeId === null) {
      throw new Error(
        "Missing the required parameter 'contextTypeId' when calling getMetricsByContext",
      );
    }

    const pathParams = {
      index,
    };
    const queryParams = {
      contextTypeId,
    };
    const headerParams = {};
    const formParams = {};

    const authNames = [];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = [MetricType];
    return this.apiClient.callApi(
      '/{index}/metadata/metrics',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
    );
  }

  /**
   * Return available metrics types
   * metadata endpoint for returning available metrics types for a given context
   * @param {String} index Specify an effective index
   * @param {String} contextTypeId a context type used for searching
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MetricType>}
   */
  getMetricsByContext(index, contextTypeId) {
    return this.getMetricsByContextWithHttpInfo(index, contextTypeId).then(
      (responseAndData) => responseAndData.data,
    );
  }

  /**
   * Get relations for given context
   * relation to a context
   * @param {String} index Specify an effective index
   * @param {String} contextTypeId a context type used for searching
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Relation>} and HTTP response
   */
  getRelationByContextIdWithHttpInfo(index, contextTypeId) {
    const postBody = null;
    // verify the required parameter 'index' is set
    if (index === undefined || index === null) {
      throw new Error("Missing the required parameter 'index' when calling getRelationByContextId");
    }
    // verify the required parameter 'contextTypeId' is set
    if (contextTypeId === undefined || contextTypeId === null) {
      throw new Error(
        "Missing the required parameter 'contextTypeId' when calling getRelationByContextId",
      );
    }

    const pathParams = {
      index,
    };
    const queryParams = {
      contextTypeId,
    };
    const headerParams = {};
    const formParams = {};

    const authNames = [];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = [Relation];
    return this.apiClient.callApi(
      '/{index}/metadata/relations',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
    );
  }

  /**
   * Get relations for given context
   * relation to a context
   * @param {String} index Specify an effective index
   * @param {String} contextTypeId a context type used for searching
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Relation>}
   */
  getRelationByContextId(index, contextTypeId) {
    return this.getRelationByContextIdWithHttpInfo(index, contextTypeId).then(
      (responseAndData) => responseAndData.data,
    );
  }

  /**
   * Return all static data combined together
   * metadata endpoint for returning all static data combined together
   * @param {String} index Specify an effective index
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GetStaticInformation200ResponseInner>} and HTTP response
   */
  getStaticInformationWithHttpInfo(index) {
    const postBody = null;
    // verify the required parameter 'index' is set
    if (index === undefined || index === null) {
      throw new Error("Missing the required parameter 'index' when calling getStaticInformation");
    }

    const pathParams = {
      index,
    };
    const queryParams = {};
    const headerParams = {};
    const formParams = {};

    const authNames = [];
    const contentTypes = [];
    const accepts = ['application/json'];
    const returnType = [GetStaticInformation200ResponseInner];
    return this.apiClient.callApi(
      '/{index}/metadata',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
    );
  }

  /**
   * Return all static data combined together
   * metadata endpoint for returning all static data combined together
   * @param {String} index Specify an effective index
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GetStaticInformation200ResponseInner>}
   */
  getStaticInformation(index) {
    return this.getStaticInformationWithHttpInfo(index).then(
      (responseAndData) => responseAndData.data,
    );
  }

  /* eslint-enable sonarjs/no-duplicate-string */
}
