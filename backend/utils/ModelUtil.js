/**
 * Assurance Search API
 * ```   Ericsson   |   DocNo n/155 19-CAF CAF 101 105/3   |   Rev PA1   |   Inter-work Description ``` ## Introduction This document describes the User Interface Internal REST API identified in the ADP GUI FA. ### Terms - **UI Internal Interface**: The interface providing access to static content meant to be used exclusively by the User Interface itself. All static content paths are relative to this URI. - **Client Container**: An SPA (Single Page Application) implementing the App Shell pattern e.g. E-UI SDK Container. - **UI App**: A full screen user interface exposed by a Microservice that can execute in the Client Container e.g. E-UI SDK App. - ***External UI App***: Any UIs that have a separate web page (outside the Client Container) or other alternative renderer e.g. Citrix. - **UI Component**: A reusable, embeddable UI Web Component exposed by a Microservice e.g. E-UI SDK Shareable Components.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sasha.katsman@ericsson.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/**
 * @module ModelUtil
 * @version 1.0.0
 */

/**
 * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an
 * application to use this class directly - the *Api and model classes provide the public API for the service. The
 * contents of this file should be regarded as internal but are documented for completeness.
 * @alias module:ModelUtil
 * @class
 */
class ModelUtil {
  /**
   * Parses an ISO-8601 string representation or epoch representation of a date value.
   * @param {String} str The date value as a string.
   * @returns {Date} The parsed date object.
   */
  static parseDate(str) {
    if (Number.isNaN(str)) {
      return new Date(str.replace(/(\d)(T)(\d)/i, '$1 $3'));
    }
    return new Date(+str);
  }

  static defaultDataConversionCase(type, data) {
    if (type === Object) {
      // generic object, return directly
      return data;
    }
    if (typeof type.constructFromObject === 'function') {
      // for model type like User and enum class
      return type.constructFromObject(data);
    }
    if (Array.isArray(type)) {
      // for array type like: ['String']
      const itemType = type[0];

      return data.map((item) => ModelUtil.convertToType(item, itemType));
    }
    if (typeof type === 'object') {
      // for plain object type like: {'String': 'Integer'}
      let keyType;
      let valueType;
      for (const k in type) {
        if (Object.prototype.hasOwnProperty.call(type, k)) {
          keyType = k;
          valueType = type[k];
          break;
        }
      }

      const result = {};
      for (const k in data) {
        if (Object.prototype.hasOwnProperty.call(data, k)) {
          const key = ModelUtil.convertToType(k, keyType);
          const value = ModelUtil.convertToType(data[k], valueType);
          result[key] = value;
        }
      }

      return result;
    }
    // for unknown type, return the data directly
    return data;
  }

  /**
   * Converts a value to the specified type.
   * @param {(String|Object)} data The data to convert, as a string or object.
   * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types
   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
   * all properties on <code>data<code> will be converted to this type.
   * @returns An instance of the specified type or null or undefined if data is null or undefined.
   */
  static convertToType(data, type) {
    if (data === null || data === undefined) {
      return data;
    }

    switch (type) {
      case 'Boolean':
        return Boolean(data);
      case 'Integer':
        return parseInt(data, 10);
      case 'Number':
        return parseFloat(data);
      case 'String':
        return String(data);
      case 'Date':
        return this.parseDate(String(data));
      case 'Blob':
        return data;
      default:
        return this.defaultDataConversionCase(type, data);
    }
  }

  /**
   * Constructs a new map or array model from REST data.
   * @param data {Object|Array} The REST data.
   * @param obj {Object|Array} The target object or array.
   */
  static constructFromObject(data, obj, itemType) {
    if (Array.isArray(data)) {
      for (let i = 0; i < data.length; i += 1) {
        if (Object.prototype.hasOwnProperty.call(data, i)) {
          obj[i] = ModelUtil.convertToType(data[i], itemType);
        }
      }
    } else {
      for (const k in data) {
        if (Object.prototype.hasOwnProperty.call(data, k)) {
          obj[k] = ModelUtil.convertToType(data[k], itemType);
        }
      }
    }
  }
}

/**
 * Enumeration of collection format separator strategies.
 * @enum {String}
 * @readonly
 */
ModelUtil.CollectionFormatEnum = {
  /**
   * Comma-separated values. Value: <code>csv</code>
   * @const
   */
  CSV: ',',

  /**
   * Space-separated values. Value: <code>ssv</code>
   * @const
   */
  SSV: ' ',

  /**
   * Tab-separated values. Value: <code>tsv</code>
   * @const
   */
  TSV: '\t',

  /**
   * Pipe(|)-separated values. Value: <code>pipes</code>
   * @const
   */
  PIPES: '|',

  /**
   * Native array. Value: <code>multi</code>
   * @const
   */
  MULTI: 'multi',
};

/**
 * The default API client implementation.
 * @type {module:ModelUtil}
 */
ModelUtil.instance = new ModelUtil();
export default ModelUtil;
