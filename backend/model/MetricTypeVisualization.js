/**
 * Assurance Search API
 * ```   Ericsson   |   DocNo n/155 19-CAF CAF 101 105/3   |   Rev PA1   |   Inter-work Description ``` ## Introduction This document describes the User Interface Internal REST API identified in the ADP GUI FA. ### Terms - **UI Internal Interface**: The interface providing access to static content meant to be used exclusively by the User Interface itself. All static content paths are relative to this URI. - **Client Container**: An SPA (Single Page Application) implementing the App Shell pattern e.g. E-UI SDK Container. - **UI App**: A full screen user interface exposed by a Microservice that can execute in the Client Container e.g. E-UI SDK App. - ***External UI App***: Any UIs that have a separate web page (outside the Client Container) or other alternative renderer e.g. Citrix. - **UI Component**: A reusable, embeddable UI Web Component exposed by a Microservice e.g. E-UI SDK Shareable Components.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sasha.katsman@ericsson.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ModelUtil from '../utils/ModelUtil.js';
/* eslint-disable no-unused-vars */
/* eslint-enable no-unused-vars */

/**
 * The MetricTypeVisualization model module.
 * @module model/MetricTypeVisualization
 * @version 1.0.0
 */
class MetricTypeVisualization {
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {
    return obj;
  }

  /**
   * Constructs a <code>MetricTypeVisualization</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MetricTypeVisualization} obj Optional instance to populate.
   * @return {module:model/MetricTypeVisualization} The populated <code>MetricTypeVisualization</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MetricTypeVisualization();

      if (Object.prototype.hasOwnProperty.call(data, 'category')) {
        obj.category = ModelUtil.convertToType(data.category, '[String]');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'query')) {
        obj.query = ModelUtil.convertToType(data.query, 'String');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'groups')) {
        obj.groups = ModelUtil.convertToType(data.groups, '{String: [String]}');
      }
    }
    return obj;
  }

  convertToObject() {
    return {
      category: this.category,
      query: this.query,
      groups: this.groups,
    };
  }

  static jsonStringValidation(data, keyName) {
    if (data[keyName] && !(typeof data[keyName] === 'string' || data[keyName] instanceof String)) {
      return false;
    }
    return true;
  }

  /**
   * Validates the JSON data with respect to <code>MetricTypeVisualization</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricTypeVisualization</code>.
   */
  static validateJSON(data) {
    // ensure the json data is an array
    if (!Array.isArray(data.category)) {
      throw new Error(
        JSON.stringify({
          customValidationError: true,
          name: 'ModelValidationError',
          message: `Expected the field \`category\` to be an array in the JSON data but got ${data.category}`,
        }),
      );
    }
    // ensure the json data is a string
    if (!MetricTypeVisualization.jsonStringValidation(data, 'query')) {
      throw new Error(
        JSON.stringify({
          customValidationError: true,
          name: 'ModelValidationError',
          message: `Expected the field \`query\` to be a primitive type in the JSON string but got ${data.query}`,
        }),
      );
    }

    return true;
  }

  /**
   * Returns Categories for this metric
   * @return {Array.<String>}
   */
  getCategory() {
    return this.category;
  }

  /**
   * Sets Categories for this metric
   * @param {Array.<String>} category Categories for this metric
   */
  setCategory(category) {
    this.category = category;
  }

  /**
   * Returns An example query string
   * @return {String}
   */
  getQuery() {
    return this.query;
  }

  /**
   * Sets An example query string
   * @param {String} query An example query string
   */
  setQuery(query) {
    this.query = query;
  }

  /**
   * @return {Object.<String, Array.<String>>}
   */
  getGroups() {
    return this.groups;
  }

  /**
   * @param {Object.<String, Array.<String>>} groups
   */
  setGroups(groups) {
    this.groups = groups;
  }

  // Placeholder method to suppress eslint's no-unused-vars error
  static placeholder() {
    ModelUtil.convertToType(123456, 'String');
  }
}

/**
 * Categories for this metric
 * @member {Array.<String>} category
 */
MetricTypeVisualization.prototype.category = undefined;

/**
 * An example query string
 * @member {String} query
 */
MetricTypeVisualization.prototype.query = undefined;

/**
 * @member {Object.<String, Array.<String>>} groups
 */
MetricTypeVisualization.prototype.groups = undefined;

export default MetricTypeVisualization;
