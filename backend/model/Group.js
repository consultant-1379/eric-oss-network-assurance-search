/**
 * Assurance Search API
 * ```   Ericsson   |   DocNo n/155 19-CAF CAF 101 105/3   |   Rev PA1   |   Inter-work Description ``` ## Introduction This document describes the User Interface Internal REST API identified in the ADP GUI FA. ### Terms - **UI Internal Interface**: The interface providing access to static content meant to be used exclusively by the User Interface itself. All static content paths are relative to this URI. - **Client Container**: An SPA (Single Page Application) implementing the App Shell pattern e.g. E-UI SDK Container. - **UI App**: A full screen user interface exposed by a Microservice that can execute in the Client Container e.g. E-UI SDK App. - ***External UI App***: Any UIs that have a separate web page (outside the Client Container) or other alternative renderer e.g. Citrix. - **UI Component**: A reusable, embeddable UI Web Component exposed by a Microservice e.g. E-UI SDK Shareable Components.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sasha.katsman@ericsson.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ModelUtil from '../utils/ModelUtil.js';
/* eslint-disable no-unused-vars */
/* eslint-enable no-unused-vars */

/**
 * The Group model module.
 * @module model/Group
 * @version 1.0.0
 */
class Group {
  /**
   * Constructs a new <code>Group</code>.
   * metric group
   * @alias module:model/Group
   * @param name {String} metric group name
   * @param title {String} metric group title which is displayed in the historical dashboard tab
   */
  constructor(name, title) {
    Group.initialize(this, name, title);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, name, title) {
    obj.name = name;
    obj.title = title;
  }

  /**
   * Constructs a <code>Group</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Group} obj Optional instance to populate.
   * @return {module:model/Group} The populated <code>Group</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Group();

      if (Object.prototype.hasOwnProperty.call(data, 'name')) {
        obj.name = ModelUtil.convertToType(data.name, 'String');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'title')) {
        obj.title = ModelUtil.convertToType(data.title, 'String');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'sort')) {
        obj.sort = ModelUtil.convertToType(data.sort, 'String');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'sortOrder')) {
        obj.sortOrder = ModelUtil.convertToType(data.sortOrder, 'String');
      }
    }
    return obj;
  }

  convertToObject() {
    return {
      name: this.name,
      title: this.title,
      sort: this.sort,
      sortOrder: this.sortOrder,
    };
  }

  static jsonStringValidation(data, keyName) {
    if (data[keyName] && !(typeof data[keyName] === 'string' || data[keyName] instanceof String)) {
      return false;
    }
    return true;
  }

  /**
   * Validates the JSON data with respect to <code>Group</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Group</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of Group.RequiredProperties) {
      if (!data[property]) {
        throw new Error(
          JSON.stringify({
            customValidationError: true,
            name: 'ModelValidationError',
            message: `The required field \`${property}\` is not found in the JSON data: ${JSON.stringify(
              data,
            )}`,
          }),
        );
      }
    }
    // ensure the json data is a string
    if (!Group.jsonStringValidation(data, 'name')) {
      throw new Error(
        JSON.stringify({
          customValidationError: true,
          name: 'ModelValidationError',
          message: `Expected the field \`name\` to be a primitive type in the JSON string but got ${data.name}`,
        }),
      );
    }
    // ensure the json data is a string
    if (!Group.jsonStringValidation(data, 'title')) {
      throw new Error(
        JSON.stringify({
          customValidationError: true,
          name: 'ModelValidationError',
          message: `Expected the field \`title\` to be a primitive type in the JSON string but got ${data.title}`,
        }),
      );
    }
    // ensure the json data is a string
    if (!Group.jsonStringValidation(data, 'sort')) {
      throw new Error(
        JSON.stringify({
          customValidationError: true,
          name: 'ModelValidationError',
          message: `Expected the field \`sort\` to be a primitive type in the JSON string but got ${data.sort}`,
        }),
      );
    }
    // ensure the json data is a string
    if (!Group.jsonStringValidation(data, 'sortOrder')) {
      throw new Error(
        JSON.stringify({
          customValidationError: true,
          name: 'ModelValidationError',
          message: `Expected the field \`sortOrder\` to be a primitive type in the JSON string but got ${data.sortOrder}`,
        }),
      );
    }

    return true;
  }

  /**
   * Returns metric group name
   * @return {String}
   */
  getName() {
    return this.name;
  }

  /**
   * Sets metric group name
   * @param {String} name metric group name
   */
  setName(name) {
    this.name = name;
  }

  /**
   * Returns metric group title which is displayed in the historical dashboard tab
   * @return {String}
   */
  getTitle() {
    return this.title;
  }

  /**
   * Sets metric group title which is displayed in the historical dashboard tab
   * @param {String} title metric group title which is displayed in the historical dashboard tab
   */
  setTitle(title) {
    this.title = title;
  }

  /**
   * Returns the type of sorting
   * @return {String}
   */
  getSort() {
    return this.sort;
  }

  /**
   * Sets the type of sorting
   * @param {String} sort the type of sorting
   */
  setSort(sort) {
    this.sort = sort;
  }

  /**
   * Returns the sorting order
   * @return {String}
   */
  getSortOrder() {
    return this.sortOrder;
  }

  /**
   * Sets the sorting order
   * @param {String} sortOrder the sorting order
   */
  setSortOrder(sortOrder) {
    this.sortOrder = sortOrder;
  }

  // Placeholder method to suppress eslint's no-unused-vars error
  static placeholder() {
    ModelUtil.convertToType(123456, 'String');
  }
}

Group.RequiredProperties = ['name', 'title'];

/**
 * metric group name
 * @member {String} name
 */
Group.prototype.name = undefined;

/**
 * metric group title which is displayed in the historical dashboard tab
 * @member {String} title
 */
Group.prototype.title = undefined;

/**
 * the type of sorting
 * @member {String} sort
 */
Group.prototype.sort = undefined;

/**
 * the sorting order
 * @member {String} sortOrder
 */
Group.prototype.sortOrder = undefined;

export default Group;
