/**
 * Assurance Search API
 * ```   Ericsson   |   DocNo n/155 19-CAF CAF 101 105/3   |   Rev PA1   |   Inter-work Description ``` ## Introduction This document describes the User Interface Internal REST API identified in the ADP GUI FA. ### Terms - **UI Internal Interface**: The interface providing access to static content meant to be used exclusively by the User Interface itself. All static content paths are relative to this URI. - **Client Container**: An SPA (Single Page Application) implementing the App Shell pattern e.g. E-UI SDK Container. - **UI App**: A full screen user interface exposed by a Microservice that can execute in the Client Container e.g. E-UI SDK App. - ***External UI App***: Any UIs that have a separate web page (outside the Client Container) or other alternative renderer e.g. Citrix. - **UI Component**: A reusable, embeddable UI Web Component exposed by a Microservice e.g. E-UI SDK Shareable Components.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sasha.katsman@ericsson.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ModelUtil from '../utils/ModelUtil.js';
/* eslint-disable no-unused-vars */
import Category from './Category.js';
import Family from './Family.js';
import Group from './Group.js';
/* eslint-enable no-unused-vars */

/**
 * The UiConfiguration model module.
 * @module model/UiConfiguration
 * @version 1.0.0
 */
class UiConfiguration {
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {
    return obj;
  }

  /**
   * Constructs a <code>UiConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UiConfiguration} obj Optional instance to populate.
   * @return {module:model/UiConfiguration} The populated <code>UiConfiguration</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new UiConfiguration();

      ModelUtil.constructFromObject(data, obj, 'Array');

      if (Object.prototype.hasOwnProperty.call(data, 'families')) {
        obj.families = ModelUtil.convertToType(data.families, [Family]);
      }
      if (Object.prototype.hasOwnProperty.call(data, 'groups')) {
        obj.groups = ModelUtil.convertToType(data.groups, [Group]);
      }
      if (Object.prototype.hasOwnProperty.call(data, 'categories')) {
        obj.categories = ModelUtil.convertToType(data.categories, [Category]);
      }
    }
    return obj;
  }

  convertToObject() {
    return {
      families: this.families,
      groups: this.groups,
      categories: this.categories,
    };
  }

  static jsonStringValidation(data, keyName) {
    if (data[keyName] && !(typeof data[keyName] === 'string' || data[keyName] instanceof String)) {
      return false;
    }
    return true;
  }

  /**
   * Validates the JSON data with respect to <code>UiConfiguration</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UiConfiguration</code>.
   */
  static validateJSON(data) {
    if (data.families) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data.families)) {
        throw new Error(
          JSON.stringify({
            customValidationError: true,
            name: 'ModelValidationError',
            message: `Expected the field \`families\` to be an array in the JSON data but got ${data.families}`,
          }),
        );
      }
      // validate the optional field `families` (array)
      for (const item of data.families) {
        Family.validateJSON(item);
      }
    }
    if (data.groups) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data.groups)) {
        throw new Error(
          JSON.stringify({
            customValidationError: true,
            name: 'ModelValidationError',
            message: `Expected the field \`groups\` to be an array in the JSON data but got ${data.groups}`,
          }),
        );
      }
      // validate the optional field `groups` (array)
      for (const item of data.groups) {
        Group.validateJSON(item);
      }
    }
    if (data.categories) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data.categories)) {
        throw new Error(
          JSON.stringify({
            customValidationError: true,
            name: 'ModelValidationError',
            message: `Expected the field \`categories\` to be an array in the JSON data but got ${data.categories}`,
          }),
        );
      }
      // validate the optional field `categories` (array)
      for (const item of data.categories) {
        Category.validateJSON(item);
      }
    }

    return true;
  }

  /**
   * Returns Array of configuration family objects
   * @return {Array.<module:model/Family>}
   */
  getFamilies() {
    return this.families;
  }

  /**
   * Sets Array of configuration family objects
   * @param {Array.<module:model/Family>} families Array of configuration family objects
   */
  setFamilies(families) {
    this.families = families;
  }

  /**
   * Returns Array of configuration group objects
   * @return {Array.<module:model/Group>}
   */
  getGroups() {
    return this.groups;
  }

  /**
   * Sets Array of configuration group objects
   * @param {Array.<module:model/Group>} groups Array of configuration group objects
   */
  setGroups(groups) {
    this.groups = groups;
  }

  /**
   * Returns Array of configuration category objects
   * @return {Array.<module:model/Category>}
   */
  getCategories() {
    return this.categories;
  }

  /**
   * Sets Array of configuration category objects
   * @param {Array.<module:model/Category>} categories Array of configuration category objects
   */
  setCategories(categories) {
    this.categories = categories;
  }

  // Placeholder method to suppress eslint's no-unused-vars error
  static placeholder() {
    ModelUtil.convertToType(123456, 'String');
  }
}

/**
 * Array of configuration family objects
 * @member {Array.<module:model/Family>} families
 */
UiConfiguration.prototype.families = undefined;

/**
 * Array of configuration group objects
 * @member {Array.<module:model/Group>} groups
 */
UiConfiguration.prototype.groups = undefined;

/**
 * Array of configuration category objects
 * @member {Array.<module:model/Category>} categories
 */
UiConfiguration.prototype.categories = undefined;

export default UiConfiguration;
