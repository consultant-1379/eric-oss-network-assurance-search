/**
 * Assurance Search API
 * ```   Ericsson   |   DocNo n/155 19-CAF CAF 101 105/3   |   Rev PA1   |   Inter-work Description ``` ## Introduction This document describes the User Interface Internal REST API identified in the ADP GUI FA. ### Terms - **UI Internal Interface**: The interface providing access to static content meant to be used exclusively by the User Interface itself. All static content paths are relative to this URI. - **Client Container**: An SPA (Single Page Application) implementing the App Shell pattern e.g. E-UI SDK Container. - **UI App**: A full screen user interface exposed by a Microservice that can execute in the Client Container e.g. E-UI SDK App. - ***External UI App***: Any UIs that have a separate web page (outside the Client Container) or other alternative renderer e.g. Citrix. - **UI Component**: A reusable, embeddable UI Web Component exposed by a Microservice e.g. E-UI SDK Shareable Components.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sasha.katsman@ericsson.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ModelUtil from '../utils/ModelUtil.js';
/* eslint-disable no-unused-vars */
import MetricTypeVisualization from './MetricTypeVisualization.js';
/* eslint-enable no-unused-vars */

/**
 * The MetricType model module.
 * @module model/MetricType
 * @version 1.0.0
 */
class MetricType {
  /**
   * Constructs a new <code>MetricType</code>.
   * metric type
   * @alias module:model/MetricType
   * @param id {String} MetricType id prepended with an identifier, either as 'vi_' or 'vd_'
   */
  constructor(id) {
    MetricType.initialize(this, id);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, id) {
    obj.id = id;
  }

  /**
   * Constructs a <code>MetricType</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MetricType} obj Optional instance to populate.
   * @return {module:model/MetricType} The populated <code>MetricType</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MetricType();

      if (Object.prototype.hasOwnProperty.call(data, 'id')) {
        obj.id = ModelUtil.convertToType(data.id, 'String');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'name')) {
        obj.name = ModelUtil.convertToType(data.name, 'String');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'valueType')) {
        obj.valueType = ModelUtil.convertToType(data.valueType, 'String');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'description')) {
        obj.description = ModelUtil.convertToType(data.description, 'String');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'unit')) {
        obj.unit = ModelUtil.convertToType(data.unit, 'String');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'visualization')) {
        obj.visualization = ModelUtil.convertToType(data.visualization, 'MetricTypeVisualization');
      }
    }
    return obj;
  }

  convertToObject() {
    return {
      id: this.id,
      name: this.name,
      valueType: this.valueType,
      description: this.description,
      unit: this.unit,
      visualization: this.visualization,
    };
  }

  static jsonStringValidation(data, keyName) {
    if (data[keyName] && !(typeof data[keyName] === 'string' || data[keyName] instanceof String)) {
      return false;
    }
    return true;
  }

  /**
   * Validates the JSON data with respect to <code>MetricType</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricType</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of MetricType.RequiredProperties) {
      if (!data[property]) {
        throw new Error(
          JSON.stringify({
            customValidationError: true,
            name: 'ModelValidationError',
            message: `The required field \`${property}\` is not found in the JSON data: ${JSON.stringify(
              data,
            )}`,
          }),
        );
      }
    }
    // ensure the json data is a string
    if (!MetricType.jsonStringValidation(data, 'id')) {
      throw new Error(
        JSON.stringify({
          customValidationError: true,
          name: 'ModelValidationError',
          message: `Expected the field \`id\` to be a primitive type in the JSON string but got ${data.id}`,
        }),
      );
    }
    // ensure the json data is a string
    if (!MetricType.jsonStringValidation(data, 'name')) {
      throw new Error(
        JSON.stringify({
          customValidationError: true,
          name: 'ModelValidationError',
          message: `Expected the field \`name\` to be a primitive type in the JSON string but got ${data.name}`,
        }),
      );
    }
    // ensure the json data is a string
    if (!MetricType.jsonStringValidation(data, 'valueType')) {
      throw new Error(
        JSON.stringify({
          customValidationError: true,
          name: 'ModelValidationError',
          message: `Expected the field \`valueType\` to be a primitive type in the JSON string but got ${data.valueType}`,
        }),
      );
    }
    // ensure the json data is a string
    if (!MetricType.jsonStringValidation(data, 'description')) {
      throw new Error(
        JSON.stringify({
          customValidationError: true,
          name: 'ModelValidationError',
          message: `Expected the field \`description\` to be a primitive type in the JSON string but got ${data.description}`,
        }),
      );
    }
    // ensure the json data is a string
    if (!MetricType.jsonStringValidation(data, 'unit')) {
      throw new Error(
        JSON.stringify({
          customValidationError: true,
          name: 'ModelValidationError',
          message: `Expected the field \`unit\` to be a primitive type in the JSON string but got ${data.unit}`,
        }),
      );
    }
    // validate the optional field `visualization`
    if (data.visualization) {
      // data not null
      MetricTypeVisualization.validateJSON(data.visualization);
    }

    return true;
  }

  /**
   * Returns MetricType id prepended with an identifier, either as 'vi_' or 'vd_'
   * @return {String}
   */
  getId() {
    return this.id;
  }

  /**
   * Sets MetricType id prepended with an identifier, either as 'vi_' or 'vd_'
   * @param {String} id MetricType id prepended with an identifier, either as 'vi_' or 'vd_'
   */
  setId(id) {
    this.id = id;
  }

  /**
   * Returns Display name or MetricType id prepended without identifier, 'vi_' or 'vd'
   * @return {String}
   */
  getName() {
    return this.name;
  }

  /**
   * Sets Display name or MetricType id prepended without identifier, 'vi_' or 'vd'
   * @param {String} name Display name or MetricType id prepended without identifier, 'vi_' or 'vd'
   */
  setName(name) {
    this.name = name;
  }

  /**
   * @return {module:model/MetricType.ValueTypeEnum}
   */
  getValueType() {
    return this.valueType;
  }

  /**
   * @param {module:model/MetricType.ValueTypeEnum} valueType
   */
  setValueType(valueType) {
    this.valueType = valueType;
  }

  /**
   * Returns entity description
   * @return {String}
   */
  getDescription() {
    return this.description;
  }

  /**
   * Sets entity description
   * @param {String} description entity description
   */
  setDescription(description) {
    this.description = description;
  }

  /**
   * Returns specification of the value's unit of measurement.
   * @return {String}
   */
  getUnit() {
    return this.unit;
  }

  /**
   * Sets specification of the value's unit of measurement.
   * @param {String} unit specification of the value's unit of measurement.
   */
  setUnit(unit) {
    this.unit = unit;
  }

  /**
   * @return {module:model/MetricTypeVisualization}
   */
  getVisualization() {
    return this.visualization;
  }

  /**
   * @param {module:model/MetricTypeVisualization} visualization
   */
  setVisualization(visualization) {
    this.visualization = visualization;
  }

  // Placeholder method to suppress eslint's no-unused-vars error
  static placeholder() {
    ModelUtil.convertToType(123456, 'String');
  }
}

MetricType.RequiredProperties = ['id'];

/**
 * MetricType id prepended with an identifier, either as 'vi_' or 'vd_'
 * @member {String} id
 */
MetricType.prototype.id = undefined;

/**
 * Display name or MetricType id prepended without identifier, 'vi_' or 'vd'
 * @member {String} name
 */
MetricType.prototype.name = undefined;

/**
 * @member {module:model/MetricType.ValueTypeEnum} valueType
 * @default 'integer'
 */
MetricType.prototype.valueType = 'integer';

/**
 * entity description
 * @member {String} description
 */
MetricType.prototype.description = undefined;

/**
 * specification of the value's unit of measurement.
 * @member {String} unit
 */
MetricType.prototype.unit = undefined;

/**
 * @member {module:model/MetricTypeVisualization} visualization
 */
MetricType.prototype.visualization = undefined;

/**
 * Allowed values for the <code>valueType</code> property.
 * @enum {String}
 * @readonly
 */
MetricType.ValueTypeEnum = {
  /**
   * value: "integer"
   * @const
   */
  integer: 'integer',

  /**
   * value: "float"
   * @const
   */
  float: 'float',
};

export default MetricType;
