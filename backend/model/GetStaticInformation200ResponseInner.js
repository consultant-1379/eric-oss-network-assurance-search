/**
 * Assurance Search API
 * ```   Ericsson   |   DocNo n/155 19-CAF CAF 101 105/3   |   Rev PA1   |   Inter-work Description ``` ## Introduction This document describes the User Interface Internal REST API identified in the ADP GUI FA. ### Terms - **UI Internal Interface**: The interface providing access to static content meant to be used exclusively by the User Interface itself. All static content paths are relative to this URI. - **Client Container**: An SPA (Single Page Application) implementing the App Shell pattern e.g. E-UI SDK Container. - **UI App**: A full screen user interface exposed by a Microservice that can execute in the Client Container e.g. E-UI SDK App. - ***External UI App***: Any UIs that have a separate web page (outside the Client Container) or other alternative renderer e.g. Citrix. - **UI Component**: A reusable, embeddable UI Web Component exposed by a Microservice e.g. E-UI SDK Shareable Components.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sasha.katsman@ericsson.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ModelUtil from '../utils/ModelUtil.js';
/* eslint-disable no-unused-vars */
import ContextType from './ContextType.js';
import MetricType from './MetricType.js';
import Relation from './Relation.js';
/* eslint-enable no-unused-vars */

/**
 * The GetStaticInformation200ResponseInner model module.
 * @module model/GetStaticInformation200ResponseInner
 * @version 1.0.0
 */
class GetStaticInformation200ResponseInner {
  /**
   * Constructs a new <code>GetStaticInformation200ResponseInner</code>.
   * full information about a context
   * @alias module:model/GetStaticInformation200ResponseInner
   * @param contextType {module:model/ContextType}
   * @param relations {Array.<module:model/Relation>}
   * @param metricTypes {Array.<module:model/MetricType>}
   */
  constructor(contextType, relations, metricTypes) {
    GetStaticInformation200ResponseInner.initialize(this, contextType, relations, metricTypes);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, contextType, relations, metricTypes) {
    obj.contextType = contextType;
    obj.relations = relations;
    obj.metricTypes = metricTypes;
  }

  /**
   * Constructs a <code>GetStaticInformation200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GetStaticInformation200ResponseInner} obj Optional instance to populate.
   * @return {module:model/GetStaticInformation200ResponseInner} The populated <code>GetStaticInformation200ResponseInner</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new GetStaticInformation200ResponseInner();

      if (Object.prototype.hasOwnProperty.call(data, 'contextType')) {
        obj.contextType = ModelUtil.convertToType(data.contextType, 'ContextType');
      }
      if (Object.prototype.hasOwnProperty.call(data, 'relations')) {
        obj.relations = ModelUtil.convertToType(data.relations, [Relation]);
      }
      if (Object.prototype.hasOwnProperty.call(data, 'metricTypes')) {
        obj.metricTypes = ModelUtil.convertToType(data.metricTypes, [MetricType]);
      }
    }
    return obj;
  }

  convertToObject() {
    return {
      contextType: this.contextType,
      relations: this.relations,
      metricTypes: this.metricTypes,
    };
  }

  static jsonStringValidation(data, keyName) {
    if (data[keyName] && !(typeof data[keyName] === 'string' || data[keyName] instanceof String)) {
      return false;
    }
    return true;
  }

  /**
   * Validates the JSON data with respect to <code>GetStaticInformation200ResponseInner</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetStaticInformation200ResponseInner</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of GetStaticInformation200ResponseInner.RequiredProperties) {
      if (!data[property]) {
        throw new Error(
          JSON.stringify({
            customValidationError: true,
            name: 'ModelValidationError',
            message: `The required field \`${property}\` is not found in the JSON data: ${JSON.stringify(
              data,
            )}`,
          }),
        );
      }
    }
    // validate the optional field `contextType`
    if (data.contextType) {
      // data not null
      ContextType.validateJSON(data.contextType);
    }
    if (data.relations) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data.relations)) {
        throw new Error(
          JSON.stringify({
            customValidationError: true,
            name: 'ModelValidationError',
            message: `Expected the field \`relations\` to be an array in the JSON data but got ${data.relations}`,
          }),
        );
      }
      // validate the optional field `relations` (array)
      for (const item of data.relations) {
        Relation.validateJSON(item);
      }
    }
    if (data.metricTypes) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data.metricTypes)) {
        throw new Error(
          JSON.stringify({
            customValidationError: true,
            name: 'ModelValidationError',
            message: `Expected the field \`metricTypes\` to be an array in the JSON data but got ${data.metricTypes}`,
          }),
        );
      }
      // validate the optional field `metricTypes` (array)
      for (const item of data.metricTypes) {
        MetricType.validateJSON(item);
      }
    }

    return true;
  }

  /**
   * @return {module:model/ContextType}
   */
  getContextType() {
    return this.contextType;
  }

  /**
   * @param {module:model/ContextType} contextType
   */
  setContextType(contextType) {
    this.contextType = contextType;
  }

  /**
   * @return {Array.<module:model/Relation>}
   */
  getRelations() {
    return this.relations;
  }

  /**
   * @param {Array.<module:model/Relation>} relations
   */
  setRelations(relations) {
    this.relations = relations;
  }

  /**
   * @return {Array.<module:model/MetricType>}
   */
  getMetricTypes() {
    return this.metricTypes;
  }

  /**
   * @param {Array.<module:model/MetricType>} metricTypes
   */
  setMetricTypes(metricTypes) {
    this.metricTypes = metricTypes;
  }

  // Placeholder method to suppress eslint's no-unused-vars error
  static placeholder() {
    ModelUtil.convertToType(123456, 'String');
  }
}

GetStaticInformation200ResponseInner.RequiredProperties = [
  'contextType',
  'relations',
  'metricTypes',
];

/**
 * @member {module:model/ContextType} contextType
 */
GetStaticInformation200ResponseInner.prototype.contextType = undefined;

/**
 * @member {Array.<module:model/Relation>} relations
 */
GetStaticInformation200ResponseInner.prototype.relations = undefined;

/**
 * @member {Array.<module:model/MetricType>} metricTypes
 */
GetStaticInformation200ResponseInner.prototype.metricTypes = undefined;

export default GetStaticInformation200ResponseInner;
