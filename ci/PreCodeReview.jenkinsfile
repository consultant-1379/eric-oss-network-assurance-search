#!/usr/bin/env groovy

def defaultBobImage = 'armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob.2.0:1.7.0-55'
def bob_mimer = 'python3 bob/bob2.0/bob.py -r ruleset2.0.mimer.yaml'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([
                HOME                      : '${HOME}',
                KUBECONFIG                : '${KUBECONFIG}',
                K8S_NAMESPACE             : '${K8S_NAMESPACE}',
                SONAR_HOST_URL            : '${SONAR_HOST_URL}',
                SONAR_AUTH_TOKEN          : '${SONAR_AUTH_TOKEN}',
                SONAR_BRANCH_NAME         : 'PreCodeReview',
                XRAY_USER                 : '${CREDENTIALS_XRAY_SELI_ARTIFACTORY_USR}',
                XRAY_APIKEY               : '${CREDENTIALS_XRAY_SELI_ARTIFACTORY_PSW}',
                VHUB_API_TOKEN            : '${VHUB_API_TOKEN}',
                ADP_PORTAL_API_KEY        : 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtc2lkIjoiNjM2YmNiMjkyNjBkMGQwMDkwMmUzYThjIiwiaW52YWxfc2VjcmV0IjoieGgzbXc1a3diciJ9.W45h25vEqKGdr7j_SsR3N6fBSl_dLNpJmO9B1wOjSfM',
                SELI_ARTIFACTORY_REPO_USER: '${CREDENTIALS_SELI_ARTIFACTORY_USR}',
                SELI_ARTIFACTORY_REPO_PASS: '${CREDENTIALS_SELI_ARTIFACTORY_PSW}',
                SERO_ARTIFACTORY_REPO_USER: '${CREDENTIALS_SERO_ARTIFACTORY_USR}',
                SERO_ARTIFACTORY_REPO_PASS: '${CREDENTIALS_SERO_ARTIFACTORY_PSW}',
                FOSSA_API_KEY             : '${CREDENTIALS_FOSSA_API_KEY}',
                BAZAAR_TOKEN              : '${CREDENTIALS_BAZAAR}',
                ERIDOC_USERNAME           : '${ERIDOC_CREDENTIALS_USR}',
                ERIDOC_PASSWORD           : '${ERIDOC_CREDENTIALS_PSW}',
                GERRIT_CHANGE_NUMBER      : '${GERRIT_CHANGE_NUMBER}',
                GERRIT_CHANGE_OWNER_EMAIL : '${GERRIT_CHANGE_OWNER_EMAIL}'
        ]).needDockerSocket(true).toString()

def LOCKABLE_RESOURCE_LABEL = "kaas"

pipeline {
    agent {
        node {
            label NODE_LABEL
        }
    }

    options {
        timestamps()
        ansiColor('xterm')
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '50', artifactNumToKeepStr: '50'))
    }

    environment {
        CREDENTIALS_XRAY_SELI_ARTIFACTORY = credentials('XRAY_SELI_ARTIFACTORY')
        CREDENTIALS_SELI_ARTIFACTORY = credentials('SELI_ARTIFACTORY')
        CREDENTIALS_SERO_ARTIFACTORY = credentials('SERO_ARTIFACTORY')
        KUBECONFIG = "${WORKSPACE}/.kube/config"
        CREDENTIALS_FOSSA_API_KEY = credentials('FOSSA_API_token')
        CREDENTIALS_BAZAAR = credentials('BAZAAR_token')
        FOSSA_ENABLED = "true"
        HADOLINT_ENABLED = "true"
        KUBEHUNTER_ENABLED = "true"
        KUBEAUDIT_ENABLED = "true"
        KUBESEC_ENABLED = "true"
        TRIVY_ENABLED = "true"
        XRAY_ENABLED = "true"
        ANCHORE_ENABLED = "true"
        NMAP_ENABLED = "true"
        CISCAT_ENABLED = "true"
        ZAP_ENABLED = "true"
        VHUB_API_TOKEN = credentials('vhub-api-key-id')
        ERIDOC_CREDENTIALS = credentials('eridoc-user')
        SONAR_AUTH_TOKEN = "75eb63cf68f573993738125c63bc38ccedacd868"
    }

    stages {

        stage('Prepare') {
            steps {
                checkout([
                        $class                           : 'GitSCM',
                        branches                         : [
                                [
                                        name: "${GERRIT_PATCHSET_REVISION}"
                                ]
                        ],
                        doGenerateSubmoduleConfigurations: false,
                        extensions                       : [
                                [
                                        $class             : 'SubmoduleOption',
                                        disableSubmodules  : false,
                                        parentCredentials  : true,
                                        recursiveSubmodules: true,
                                        reference          : '',
                                        trackingSubmodules : false
                                ],
                                [
                                        $class: 'CleanBeforeCheckout'
                                ]
                        ],
                        submoduleCfg                     : [],
                        userRemoteConfigs                : [
                                [
                                        url: '${GERRIT_MIRROR}/OSS/com.ericsson.oss.air/eric-oss-network-assurance-search'
                                ]
                        ]
                ])
            }
        }

        stage('Clean') {
            steps {
                retry(2) {
                    sh "${bob} clean"
                }
            }
        }

        stage('Init') {
            parallel {
                stage('Set Bob Variables') {
                    steps {
                        retry(3) {
                            sh "./docker/automatic-cbo-update.sh"
                            sh "${bob} init-precodereview"
                            sh "${bob_mimer} mimer-init"
                            script {
                                authorName = sh(returnStdout: true, script: 'git show -s --pretty=%an')
                                currentBuild.displayName = currentBuild.displayName + ' / ' + authorName
                            }
                        }
                    }
                }
                stage('Install Dependencies') {
                    steps {
                        retry(3) {
                            sh "${bob} install-dependencies"
                        }
                    }
                }
            }
        }

        stage('Main State') {
            failFast true
            parallel {
                stage('Lint') {
                    steps {
                        retry(2) {
                            sh "${bob} lint"
                        }
                    }
                }

                stage('Image & Package') {
                    stages {

                        stage('Image') {
                            steps {
                                retry(3) {
                                    ansiColor('xterm') {
                                        sh "chmod +x ./healthcheck.sh"
                                        sh "${bob} image"
                                    }
                                }
                            }
                        }

                        stage('Package') {
                            steps {
                                retry(3) {
                                    withCredentials([usernamePassword(credentialsId: 'SELI_ARTIFACTORY', usernameVariable: 'SELI_ARTIFACTORY_REPO_USER', passwordVariable: 'SELI_ARTIFACTORY_REPO_PASS')]) {
                                        ansiColor('xterm') {
                                            sh "${bob} package"
                                        }
                                    }
                                }
                            }
                            post {
                                cleanup {
                                    sh "${bob} delete-images:delete-internal-image"
                                }
                            }
                        }
                    }
                }

                stage('FOSS, Licenses, & Documentation') {
                    stages {

                        stage('FOSSA Analyze') {
                            when {
                                expression { env.FOSSA_ENABLED == "true" }
                            }
                            steps {
                                retry(2) {
                                    sh "${bob} fossa-analyze"
                                }
                            }
                        }

                        stage('FOSSA Fetch Report') {
                            when {
                                expression { env.FOSSA_ENABLED == "true" }
                            }
                            steps {
                                retry(2) {
                                    sh "${bob} fossa-scan-status-check"
                                    sh "sleep 2m 0s"
                                    sh "${bob} fetch-fossa-report-attribution"
                                    archiveArtifacts '*fossa-report.json'
                                }
                            }
                        }

                        stage('FOSSA Dependency Validate') {
                            when {
                                expression { env.FOSSA_ENABLED == "true" }
                            }
                            steps {
                                retry(2) {
                                    withCredentials([string(credentialsId: 'munin_token', variable: 'MUNIN_TOKEN')]) {
                                        sh "${bob_mimer} search-foss"
                                    }
                                    archiveArtifacts allowEmptyArchive: true, artifacts: 'build/search-foss/**.*'
                                    sh "${bob} dependency-validate"
                                }
                            }
                        }

                        stage('License Agreement Generate') {
                            when {
                                expression { env.FOSSA_ENABLED == "true" }
                            }
                            steps {
                                sh "${bob} license-agreement-generate"
                                archiveArtifacts 'config/license-agreement.json'
                            }
                        }

                        stage('License Agreement Validate') {
                            when {
                                expression { env.FOSSA_ENABLED == "true" }
                            }
                            steps {
                                sh "${bob} license-agreement-validate"
                            }
                        }

                        stage('License Agreement Doc Generate') {
                            when {
                                expression { env.FOSSA_ENABLED == "true" }
                            }
                            steps {
                                sh "${bob} license-agreement-doc-generate"
                                archiveArtifacts 'doc/license-agreement-doc.md'
                            }
                        }

                        stage('Generate') {
                            steps {
                                retry(2) {
                                    withCredentials([usernamePassword(credentialsId: 'SELI_ARTIFACTORY', usernameVariable: 'SELI_ARTIFACTORY_REPO_USER', passwordVariable: 'SELI_ARTIFACTORY_REPO_PASS')]) {
                                        ansiColor('xterm') {
                                            sh "${bob} generate-docs"
                                            archiveArtifacts "build/doc*/**/*.*"
                                            publishHTML(target: [
                                                    allowMissing         : false,
                                                    alwaysLinkToLastBuild: false,
                                                    keepAll              : true,
                                                    reportDir            : 'build/doc-archive/html',
                                                    reportFiles          : 'Network_Assurance_Search.html',
                                                    reportName           : 'Network assurance Search documentation'
                                            ])
                                        }
                                    }
                                }
                            }
                        }

                        stage('Upload Marketplace Documentation') {
                            steps {
                                retry(2) {
                                    withCredentials([usernamePassword(credentialsId: 'SELI_ARTIFACTORY', usernameVariable: 'SELI_ARTIFACTORY_REPO_USER', passwordVariable: 'SELI_ARTIFACTORY_REPO_PASS')]) {
                                        script {
                                            echo "Marketplace upload"
                                            sh "${bob} marketplace-upload-dev"
                                            sh "${bob} marketplace-upload-refresh"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                stage('Unit Tests & SonarQube Analysis') {
                    stages {
                        stage('Frontend Unit Tests') {
                            steps {
                                retry(2) {
                                    withCredentials([usernamePassword(credentialsId: 'SELI_ARTIFACTORY', usernameVariable: 'SELI_ARTIFACTORY_REPO_USER', passwordVariable: 'SELI_ARTIFACTORY_REPO_PASS')]) {
                                        ansiColor('xterm') {
                                            sh "${bob} test-unit"
                                            archiveArtifacts allowEmptyArchive: true, artifacts: 'frontend/coverage/**/**.*'
                                        }
                                    }
                                }
                            }
                        }

                        stage('Backend Unit Tests') {
                            steps {
                                withCredentials([usernamePassword(credentialsId: 'SELI_ARTIFACTORY', usernameVariable: 'SELI_ARTIFACTORY_REPO_USER', passwordVariable: 'SELI_ARTIFACTORY_REPO_PASS')]) {
                                    ansiColor('xterm') {
                                        sh "${bob} test-ws"
                                        archiveArtifacts allowEmptyArchive: true, artifacts: 'backend/test/reports/**/**/**.*'
                                    }
                                }
                            }
                        }

                        stage('SonarQube Analysis & Quality Gate') {
                            steps {
                                retry(5) {
                                    withSonarQubeEnv("${env.SQ_SERVER}") {
                                        ansiColor('xterm') {
                                            sh "${bob} sonar-scanner-ui"
                                            sh "${bob} sonar-gate-check"
                                        }
                                    }
                                }
                            }
                        }

                        stage('Contract Tests') {
                            steps {
                                withCredentials([usernamePassword(credentialsId: 'SELI_ARTIFACTORY', usernameVariable: 'SELI_ARTIFACTORY_REPO_USER', passwordVariable: 'SELI_ARTIFACTORY_REPO_PASS')]) {
                                    ansiColor('xterm') {
                                        sh "${bob} test-contract"
                                        archiveArtifacts allowEmptyArchive: true, artifacts: 'consumer-contract-tests/reports/**/**.*'
                                        archiveArtifacts allowEmptyArchive: true, artifacts: 'frontend/coverage/consumer-contract-tests/**/**.*'
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('K8S Resource Lock') {
            options {
                lock(label: LOCKABLE_RESOURCE_LABEL, variable: 'RESOURCE_NAME', quantity: 1)
            }
            environment {
                K8S_CLUSTER_ID = sh(script: "echo \${RESOURCE_NAME} | cut -d'_' -f1", returnStdout: true).trim()
                K8S_NAMESPACE = sh(script: "echo \${RESOURCE_NAME} | cut -d',' -f1 | cut -d'_' -f2", returnStdout: true).trim()
            }
            stages {
                stage('Helm Install') {
                    steps {
                        retry(3) {
                            echo "Inject kubernetes config file (${env.K8S_CLUSTER_ID}) based on the Lockable Resource name: ${env.RESOURCE_NAME}"
                            configFileProvider([configFile(fileId: "${env.K8S_CLUSTER_ID}", targetLocation: "${env.KUBECONFIG}")]) {}
                            echo "The namespace (${env.K8S_NAMESPACE}) is reserved and locked based on the Lockable Resource name: ${env.RESOURCE_NAME}"

                            sh "${bob} helm-dry-run"
                            sh "${bob} create-namespace"

                            script {
                                if (env.HELM_UPGRADE == "true") {
                                    echo "HELM_UPGRADE is set to true:"
                                    sh "${bob} helm-upgrade"
                                } else {
                                    echo "HELM_UPGRADE is NOT set to true:"
                                    sh "${bob} helm-install"
                                }
                            }

                            sh "${bob} healthcheck"
                        }
                    }
                    post {
                        always {
                            retry(2) {
                                sh "${bob} kaas-info || true"
                                archiveArtifacts allowEmptyArchive: true, artifacts: 'build/kaas-info.log'
                            }
                        }
                        unsuccessful {
                            sh "${bob} collect-k8s-logs || true"
                            archiveArtifacts allowEmptyArchive: true, artifacts: "k8s-logs/*"
                            sh "${bob} delete-namespace"
                        }
                    }
                }

                stage('K8S Test') {
                    steps {
                        retry(2) {
                            sh "${bob} helm-test"
                        }
                    }
                }

                stage('Vulnerability Analysis') {
                    environment {
                        K8S_CLUSTER_ID = sh(script: "echo \${RESOURCE_NAME} | cut -d'_' -f1", returnStdout: true).trim()
                        K8S_NAMESPACE = sh(script: "echo \${RESOURCE_NAME} | cut -d',' -f1 | cut -d'_' -f2", returnStdout: true).trim()
                    }
                    steps {
                        parallel(
                            "Anchore-Grype": {
                                script {
                                    if (env.ANCHORE_ENABLED == "true") {
                                        retry(3) {
                                            sh "${bob} grype-scan"
                                            archiveArtifacts 'build/va-reports/anchore-reports/**.*'
                                        }
                                    }
                                }
                            },
                            "CIS-CAT": {
                                script {
                                    if (env.CISCAT_ENABLED == "true") {
                                        withCredentials([usernamePassword(credentialsId: 'SERO_ARTIFACTORY', usernameVariable: 'SERO_ARTIFACTORY_REPO_USER', passwordVariable: 'SERO_ARTIFACTORY_REPO_PASS')]){
                                            sh "${bob} cis-cat-scan"
                                        }
                                    } else {
                                        sh "${bob} cis-cat-scan:create-report-folder"
                                        echo "stage CIS-CAT skipped"
                                    }
                                    archiveArtifacts allowEmptyArchive: true, artifacts: "build/va-reports/ciscat-reports/**/*.*"
                                }
                            },
                            "Hadolint": {
                                script {
                                    if (env.HADOLINT_ENABLED == "true") {
                                        retry(3) {
                                            sh "${bob} hadolint-scan"
                                            echo "Evaluating Hadolint Scan Resultcodes..."
                                            sh "${bob} evaluate-hadolint-design-rule-check-resultcodes"
                                            archiveArtifacts "build/va-reports/hadolint-reports/**.*"
                                        }
                                    }
                                }
                            },
                            "Kubehunter": {
                                script {
                                    if (env.KUBEHUNTER_ENABLED == "true") {
                                        retry(3) {
                                            configFileProvider([configFile(fileId: "${K8S_CLUSTER_ID}", targetLocation: "${env.KUBECONFIG}")]) {}
                                            sh 'echo "System: [$system]"'
                                            sh 'echo "Kubeconfig: [$KUBECONFIG]"'
                                            sh "${bob} kubehunter-scan"
                                            archiveArtifacts "build/va-reports/kubehunter-reports/**/*"
                                        }
                                    }
                                }
                            },
                            "Kubeaudit": {
                                script {
                                    if (env.KUBEAUDIT_ENABLED == "true") {
                                        retry(3) {
                                            sh "${bob} kubeaudit-scan"
                                            archiveArtifacts "build/va-reports/kubeaudit-reports/**/*"
                                        }
                                    }
                                }
                            },
                            "Kubsec": {
                                script {
                                    if (env.KUBESEC_ENABLED == "true") {
                                        retry(3) {
                                            sh "${bob} kubesec-scan"
                                            archiveArtifacts 'build/va-reports/kubesec-reports/*'
                                        }
                                    }
                                }
                            },
                            "NMAP Unicorn": {
                                script {
                                    withCredentials([usernamePassword(credentialsId: 'SERO_ARTIFACTORY', usernameVariable: 'SERO_ARTIFACTORY_REPO_USER', passwordVariable: 'SERO_ARTIFACTORY_REPO_PASS')]){
                                        if (env.NMAP_ENABLED == "true") {
                                            configFileProvider([configFile(fileId: "${K8S_CLUSTER_ID}", targetLocation: "${env.KUBECONFIG}")]) {}
                                            sh "${bob} nmap-port-scanning"
                                            archiveArtifacts "build/va-reports/nmap-reports/**/**.*"
                                        } else {
                                            echo "stage NMAP Unicorn skipped"
                                        }
                                    }
                                }
                            },
                            "Trivy": {
                                script {
                                    if (env.TRIVY_ENABLED == "true") {
                                        retry(3) {
                                            sh "${bob} trivy-scan"
                                            archiveArtifacts 'build/va-reports/trivy-reports/**.*'
                                            archiveArtifacts 'trivy_metadata.properties'
                                        }
                                    }
                                }
                            },
                            "X-Ray": {
                                script {
                                    if (env.XRAY_ENABLED == "true") {
                                        retry(3) {
                                            sleep(60)
                                            sh "${bob} fetch-xray-report"
                                            archiveArtifacts 'build/va-reports/xray-reports/xray_report.json'
                                            archiveArtifacts 'build/va-reports/xray-reports/raw_xray_report.json'
                                        }
                                    }
                                }
                            },
                            "ZAP": {
                                script {
                                    if (env.ZAP_ENABLED == "true") {
                                        withCredentials([usernamePassword(credentialsId: 'SERO_ARTIFACTORY', usernameVariable: 'SERO_ARTIFACTORY_REPO_USER', passwordVariable: 'SERO_ARTIFACTORY_REPO_PASS')]) {
                                            sh "${bob} zap-scan"
                                        }
                                    } else {
                                        sh "${bob} zap-scan:create-report-folder"
                                        echo "stage ZAP skipped"
                                    }
                                    archiveArtifacts allowEmptyArchive: true, artifacts: "build/va-reports/zap-reports/**/**.*"
                                }
                            }
                        )
                    }

                    post {
                        unsuccessful {
                            sh "${bob} collect-k8s-logs || true"
                            archiveArtifacts allowEmptyArchive: true, artifacts: 'k8s-logs/**/*.*'
                        }
                        cleanup {
                            retry(3) {
                                sh "${bob} delete-namespace"
                                sh "${bob} cleanup-anchore-trivy-images"
                            }
                        }
                    }
                }
            }
        }


        stage('Generate Vulnerability Report V2.0') {
            steps {
                retry(2) {
                    sh "${bob} generate-VA-report-V2:no-upload"
                    archiveArtifacts 'build/va-reports/**_Vulnerability_Report_2.0.md'
                }
            }
        }

        /**
         stage('Eridoc upload dryrun') {
         steps {
         withCredentials([usernamePassword(credentialsId: 'eridoc-user', usernameVariable: 'ERIDOC_USERNAME', passwordVariable: 'ERIDOC_PASSWORD')
         ]) {
         sh "${bob} eridoc-dryrun"
         sh "${bob_mimer} generate-prod-structure-documents-yaml"
         archiveArtifacts allowEmptyArchive: true, artifacts: 'build/documents.yaml'
         }
         }
         }
         stage('FOSS Validation for Mimer') {
         when {
         expression { env.MUNIN_UPDATE_ENABLED == "true" }
         }
         steps {
         withCredentials([string(credentialsId: 'munin_token', variable: 'MUNIN_TOKEN')]) {
         sh "${bob_mimer} munin-update-version"
         }
         }
         post {
         always {
         archiveArtifacts allowEmptyArchive: true, artifacts: '*output/*'
         }
         }
         }
         **/
    }
    post {
        success {
            script {
                retry(3) {
                    sh "${bob} helm-chart-check-report-warnings"
                    addHelmDRWarningIcon()
                    modifyBuildDescription()
                }
            }
        }
// 		always {
// 			publishHTML (target: [
// 				allowMissing: false,
// 				alwaysLinkToLastBuild: false,
// 				keepAll: true,
// 				reportDir: ".bob/check-charts/",
// 				reportFiles: 'design-rule-check-report.html',
// 				reportName: "Helm Design Rule Chart Check"
// 			])
// 			publishHTML (target: [
// 				allowMissing: false,
// 				alwaysLinkToLastBuild: false,
// 				keepAll: true,
// 				reportDir: ".bob/check-image/",
// 				reportFiles: 'image-design-rule-check-report.html',
// 				reportName: "Helm Design Rule Image Check"
// 			])
//             publishHTML (target: [
//                 allowMissing: false,
//                 alwaysLinkToLastBuild: false,
//                 keepAll: true,
//                 reportDir: "backend/test/reports/mochawesome/",
//                 reportFiles: 'mochawesome.html',
//                 reportName: "WS Endpoint Test Report"
//             ])
//             publishHTML (target: [
//                 allowMissing: false,
//                 alwaysLinkToLastBuild: false,
//                 keepAll: true,
//                 reportDir: "frontend/test_js/allure-report/",
//                 reportFiles: 'index.html',
//                 reportName: "Frontend Selenium Test Report"
//             ])
// 			publishHTML(target: [
// 				allowMissing: false,
// 				alwaysLinkToLastBuild: false,
// 				keepAll: true,
// 				reportDir: 'frontend/coverage/lcov-report',
// 				reportFiles: 'index.html',
// 				reportName: 'Frontend Component Test Coverage Report'
// 			])
//             publishHTML(target: [
//                 allowMissing: false,
//                 alwaysLinkToLastBuild: false,
//                 keepAll: true,
//                 reportDir: 'frontend/testReport/Chromium',
//                 reportFiles: 'mochawesome.html',
//                 reportName: 'Frontend Chromium Unit Test Report'
//             ])
//             publishHTML(target: [
//                 allowMissing: false,
//                 alwaysLinkToLastBuild: false,
//                 keepAll: true,
//                 reportDir: 'frontend/testReport/Firefox',
//                 reportFiles: 'mochawesome.html',
//                 reportName: 'Frontend Firefox Unit Test Report'
//             ])
//             archiveArtifacts 'backend/test/reports/**'
//             archiveArtifacts 'frontend/test_js/allure-report/**'
// 			archiveArtifacts '.bob/check-image/image-design-rule-check-report.html'
// 			archiveArtifacts '.bob/check-charts/design-rule-check-report.html'
// 			archiveArtifacts allowEmptyArchive: true, artifacts: 'ruleset2.0.yaml, ci/PreCodeReview.jenkinsfile'
// 			sh "${bob} delete-builder-images"
// 		}
    }
}


def modifyBuildDescription() {
    def CHART_NAME = "eric-oss-network-assurance-search"
    def DOCKER_IMAGE_NAME = "eric-oss-network-assurance-search"
    def VERSION = readFile('.bob/var.version').trim()
    def CHART_DOWNLOAD_LINK = "https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss-ci-internal-helm/${CHART_NAME}/${CHART_NAME}-${VERSION}.tgz"
    def DOCKER_IMAGE_DOWNLOAD_LINK = "https://armdocker.rnd.ericsson.se/artifactory/docker-v2-global-local/proj-eric-oss-ci-internal/${CHART_NAME}/${VERSION}/"
    currentBuild.description = "Helm Chart: <a href=${CHART_DOWNLOAD_LINK}>${CHART_NAME}-${VERSION}.tgz</a><br>Docker Image: <a href=${DOCKER_IMAGE_DOWNLOAD_LINK}>${DOCKER_IMAGE_NAME}-${VERSION}</a><br>Gerrit: <a href=${env.GERRIT_CHANGE_URL}>${env.GERRIT_CHANGE_URL}</a><br>"
}

def addHelmDRWarningIcon() {
    def val = readFile '.bob/var.helm-chart-check-report-warnings'
    if (val.trim().equals("true")) {
        echo "WARNING: One or more Helm Design Rules have a WARNING state. Review the Archived Helm Design Rule Check Report: design-rule-check-report.html"
        manager.addWarningBadge("One or more Helm Design Rules have a WARNING state. Review the Archived Helm Design Rule Check Report: design-rule-check-report.html")
    } else {
        echo "No Helm Design Rules have a WARNING state"
    }
}


// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -> "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')
        def cmd = """\
			|docker run
			|--init
			|--rm
			|--workdir \${PWD}
			|--user \$(id -u):\$(id -g)
			|-v \${PWD}:\${PWD}
			|-v /etc/group:/etc/group:ro
			|-v /etc/passwd:/etc/passwd:ro
			|-v /proj/mvn/:/proj/mvn
			|-v \${HOME}:\${HOME}
			|${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
			|${env}
			|\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
			|--group-add \$(stat -c '%g' /var/run/docker.sock)
			|${bobImage}
			|"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
